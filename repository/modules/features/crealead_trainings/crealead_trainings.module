<?php
/**
 * @file
 * Code for the Formations feature.
 */

include_once 'crealead_trainings.features.inc';

function crealead_trainings_form_training_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','crealead_trainings') . '/js/crealead_trainings.js');

  global $user;
  $current_user_roles = $user->roles;
  $crealead_trainings_allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($crealead_trainings_allowed_roles, $current_user_roles);

  // Related brands list handling ----------------------------------------------
  // The training create/edit form always contains a user id.
  // If training is being created, user id is the current user id.
  // If training is being modified, user id is the training author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $training_brands = $query->execute()->fetchAllKeyed(2, 2);

  $brand_options = $form['field_training_related_brands']['und']['#options'];
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $training_brands)) {
      unset($brand_options[$key]);
    }
  }
  $form['field_training_related_brands']['und']['#options'] = $brand_options;

  // Then, if training is being modified and current user is not news author,
  // we must display a disabled brand list, unless current used is allowed to.
  if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
    $form['field_training_related_brands']['#disabled'] = TRUE;
  }
  // End of Related brands list handling ---------------------------------------

  // If training is being created from a brand page,
  // we must catch the brand nid from url
  // and check the corresponding brand in field_related_brands field.
  if (!isset($form['nid']['#value']) && NULL != arg(3)) {
    $form['field_training_related_brands']['und']['#default_value'] = arg(3);
  }
  // End of Related brands list handling ---------------------------------------

  // We must display only sector brands and certifications/labels the parent brand(s) of the current training is (are) related to.
  // First, we get the parent brands.
  $parent_brands = crealead_trainings_get_parent_brands($form['nid']['#value']);
  $parent_certifs_labels = crealead_brands_get_parent_certifs_labels($parent_brands);

  // If any parent brands exist, we get the sector brands of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = crealead_brands_get_parent_sector_brands($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        crealead_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }

    // If any certif/label exists
    if (!empty($parent_certifs_labels)) {
      // We have to clean the certifications/labels field options array by keeping only the parent ones.
      $form['field_related_certifs_labels']['und']['#options'] =
        crealead_clean_certifs_labels_options($form['field_related_certifs_labels']['und']['#options'], $parent_certifs_labels);
    }
    else {
      $form['field_related_certifs_labels']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands field from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
    $form['field_related_certifs_labels']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function crealead_trainings_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#bundle'] == 'training' && $build['#view_mode'] == 'full') {
    if (!empty($build['field_training_related_brands']['#items'][0]['entity']->field_brand_email['und'][0]['email'])) {
      $email = $build['field_training_related_brands']['#items'][0]['entity']->field_brand_email['und'][0]['email'];
      $link = '/' . drupal_get_path_alias('node/' . $build['field_training_related_brands']['#items'][0]['entity']->nid)
        . '#bootstrap-fieldgroup-nav-item--contact';
      $contact_link = '<a href="' . $link . '">' . $email . '</a>';
      $build['training_contact'][0]['#markup'] = $contact_link;
    }
    else {
      unset($build['training_contact']);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function crealead_trainings_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'training' && $view_mode == 'full') {
    drupal_add_js(drupal_get_path('module','crealead_trainings') . '/js/crealead_view_trainings.js');
  }
}

/**
 * Implements hook_node_presave().
 */
function crealead_trainings_node_presave($node) {
  if ($node->type == 'training') {
    // Force field label to be displayed when field is empty.
    if (empty($node->field_scheduled_sessions['und'])) {
      $node->field_scheduled_sessions['und'][] = array(
        'value' => '<p></p>',
        'format' => 'full_html',
      );
    }
  }
}

function crealead_trainings_get_parent_brands($training_id) {
  if (!isset($training_id)) return array();

  $query = db_select('field_data_field_training_related_brands', 'ftrb');
  $query->fields('ftrb', array('field_training_related_brands_target_id'));
  $query->condition('entity_id', $training_id);

  return $query->execute()->fetchAllKeyed(0,0);
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_trainings_views_pre_render(&$view) {
  // If brand's training tab
  if ($view->name == 'trainings' && $view->current_display == 'entity_view_1') {
    // Link 'Ajouter une formation' must be added to block only for coes attached to the current brand.
    $current_brand = $view->current_entity;
    $wrapper = entity_metadata_wrapper('node', $current_brand);
    $brand_coes = $wrapper->field_brand_coes->value();

    global $user;
    foreach ($brand_coes as $brand_coe) {
      if ($user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter une formation',
          '/node/add/training/' . $current_brand->nid,
          array('query' => array('destination' => current_path()))
        );
        break;
      }
    }
  }
}