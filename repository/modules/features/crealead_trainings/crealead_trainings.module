<?php
/**
 * @file
 * Code for the Formations feature.
 */

include_once 'crealead_trainings.features.inc';

function crealead_trainings_form_training_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','crealead_trainings') . '/js/crealead_trainings.js');

  global $user;
  $current_user_roles = $user->roles;
  $crealead_trainings_allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($crealead_trainings_allowed_roles, $current_user_roles);

  // Related brands list handling ----------------------------------------------
  // The training create/edit form always contains a user id.
  // If training is being created, user id is the current user id.
  // If training is being modified, user id is the training author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $training_brands = $query->execute()->fetchAllKeyed(2, 2);

  $brand_options = $form['field_training_related_brands']['und']['#options'];
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $training_brands)) {
      unset($brand_options[$key]);
    }
  }
  $form['field_training_related_brands']['und']['#options'] = $brand_options;

  // Then, if training is being modified and current user is not news author,
  // we must display a disabled brand list, unless current used is allowed to.
  if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
    $form['field_training_related_brands']['#disabled'] = TRUE;
  }
  // End of Related brands list handling ---------------------------------------

  // If training is being created from a brand page,
  // we must catch the brand nid from url
  // and check the corresponding brand in field_related_brands field.
  if (!isset($form['nid']['#value']) && NULL != arg(3)) {
    $form['field_training_related_brands']['und']['#default_value'] = arg(3);
  }
  // End of Related brands list handling ---------------------------------------

  // We must display only sector brands and certifications/labels the parent brand(s) of the current training is (are) related to.
  // First, we get the parent brands.
  $parent_brands = crealead_trainings_get_parent_brands($form['nid']['#value']);
  $parent_certifs_labels = crealead_brands_get_parent_certifs_labels($parent_brands);

  // If any parent brands exist, we get the sector brands of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = crealead_brands_get_parent_sector_brands($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        crealead_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }

    // If any certif/label exists
    if (!empty($parent_certifs_labels)) {
      // We have to clean the certifications/labels field options array by keeping only the parent ones.
      $form['field_related_certifs_labels']['und']['#options'] =
        crealead_clean_certifs_labels_options($form['field_related_certifs_labels']['und']['#options'], $parent_certifs_labels);
    }
    else {
      $form['field_related_certifs_labels']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands field from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
    $form['field_related_certifs_labels']['#access'] = FALSE;
  }

  // Move "Champs Crealed" vertical tab to the bottom.
  $form['#groups']['group_crealead_fields']->weight = 200;

  // Stuff that has to be done after form build.
  $form['#after_build'][] = 'crealead_trainings_after_build';

  // Hide scheduled sessions field (handled now by sessions view).
  //$form['field_scheduled_sessions']['#access'] = FALSE;

}

function crealead_trainings_after_build($form, &$form_state) {
  // Make the field field_training_search readonly.
  $form['field_training_search']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
  $form_state['values']['field_training_search']['und'][0]['value'] = $form['field_training_search']['und'][0]['value']['#default_value'];

  return $form;
}

/**
 * Implements hook_entity_view_alter().
 */
function crealead_trainings_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#bundle'] == 'training' && $build['#view_mode'] == 'full') {
    if (!empty($build['field_training_related_brands']['#items'][0]['entity']->field_brand_email['und'][0]['email'])) {
      $email = $build['field_training_related_brands']['#items'][0]['entity']->field_brand_email['und'][0]['email'];
      $link = '/' . drupal_get_path_alias('node/' . $build['field_training_related_brands']['#items'][0]['entity']->nid)
        . '#bootstrap-fieldgroup-nav-item--contact';
      $contact_link = '<a href="' . $link . '">' . $email . '</a>';
      $build['training_contact'][0]['#markup'] = $contact_link;
    }
    else {
      unset($build['training_contact']);
    }

    // From now on, sessions field value is the concatenation of data entered by user in add/edit form
    // + content provided by the trainings/next_sessions view display.
    $previous_sessions_markup = $build['field_scheduled_sessions'][0]['#markup'];
    $sessions_list = '';
    $sessions_user_links = '';

    $trainings_view = views_get_view('trainings');
    $trainings_view->set_display('sessions_count');
    $trainings_view->pre_execute();
    $sessions_number = trim(strip_tags($trainings_view->render('sessions_count')));

//    if ($sessions_markup == '<p>Nous contacter</p>' && $sessions_number == 0) {
//      $sessions_markup = 'Nous contacter.';
//    }

    if ($sessions_number > 0) {
//      $trainings_view = views_get_view('trainings');
//      $trainings_view->set_display('next_sessions');
//      $trainings_view->pre_execute();
//      $sessions_list .= $trainings_view->render('next_sessions');

      $sessions_list = crealead_trainings_get_next_sessions($build['#node']);

      // At the moment we know that at least one training session exists,
      // we can remove the mention "Nous contacter"
      // which is the field_scheduled_sessions saved default value (see crealead_trainings_node_presave hook).
      if (strstr($previous_sessions_markup, 'Nous contacter')) {
        $previous_sessions_markup = '';
      }

      if ($sessions_number > 3 ) {
        $sessions_list_link = l('Voir toutes les sessions', '/formations/toutes-les-sessions/' . $build['#node']->nid);
        $sessions_list .= '<div class="session-list-link">' . $sessions_list_link . '</div>';
      }
    }
    global $user;

    if ($user->uid == $build['#node']->uid) {
      $new_session_link = l(
        'Créer une session',
        '/node/add/training-session/' . $build['#node']->nid,
        array('query' => array('destination' => current_path()))
      );
      $sessions_user_links .= '<div class="new-session-link">' . $new_session_link . '</div>';
    }
    $build['field_scheduled_sessions'][0]['#markup'] = $previous_sessions_markup . $sessions_list . $sessions_user_links;
  }
}

/**
 * Implements hook_node_view().
 */
function crealead_trainings_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'training' && $view_mode == 'full') {
    drupal_add_js(drupal_get_path('module','crealead_trainings') . '/js/crealead_view_trainings.js');
  }
}

/**
 * Implements hook_node_presave().
 */
function crealead_trainings_node_presave($node) {
  if ($node->type == 'training') {
     // If Sessions programmmées field is empty, the default content is "Nous contacter".
    if (empty($node->field_scheduled_sessions['und'])) {
      $node->field_scheduled_sessions['und'][] = array(
        'value' => '<p>Nous contacter</p>',
        'format' => 'full_html',
      );
    }

    // --- Technical field_training_search field handling --- //
    $training_intro = '';
    $training_public = '';
    $training_aims = '';
    $certifs_labels_names = '';
    $title = $node->title . ' ';
    $training_content = strip_tags($node->body['und'][0]['value']) . ' ';

    if (!empty($node->field_introduction['und'])) {
      $training_intro .= strip_tags($node->field_introduction['und'][0]['value']);
    }

    if (!empty($node->field_training_public['und'])) {
      $training_public .= strip_tags($node->field_training_public['und'][0]['value']);
    }
    if (!empty($node->field_training_aims['und'])) {
      $training_aims = strip_tags($node->field_training_aims['und'][0]['value']);
    }

    foreach ($node->field_training_related_brands['und'] as $brand) {
      $wrapper = entity_metadata_wrapper('node', $brand['target_id']);
      $certifs_labels = $wrapper->field_certifications_labels->value();
      foreach ($certifs_labels as $certif_label) {
        $term = taxonomy_term_load($certif_label->tid);
        $certifs_labels_names .= $term->name . ' ';
      }
    }
    // Store training intro, content, public and objectives into field_training_search technical field.
    $search_data =  $title . $training_intro . $training_content . $training_public . $training_aims . $certifs_labels_names;

    $search_array = array('value' => $search_data, 'format' => 'plain_text');
    if (!isset($node->field_training_search['und'][0])) {
      $node->field_training_search['und'][] = $search_array;
    }
    else {
      $node->field_training_search['und'][0] = $search_array;
    }
    // --- End of technical field_training_search field handling --- //
  }
}

function crealead_trainings_get_parent_brands($training_id) {
  if (!isset($training_id)) return array();

  $query = db_select('field_data_field_training_related_brands', 'ftrb');
  $query->fields('ftrb', array('field_training_related_brands_target_id'));
  $query->condition('entity_id', $training_id);

  return $query->execute()->fetchAllKeyed(0,0);
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_trainings_views_pre_render(&$view) {
  if ($view->name == 'trainings' && $view->current_display == 'list_page') {
    drupal_add_js(drupal_get_path('module','crealead_trainings') . '/js/crealead_view_trainings.js');
  }
  // If brand's training tab
  if ($view->name == 'trainings' && $view->current_display == 'entity_view_1') {
    // Link 'Ajouter une formation' must be added to block only for coes attached to the current brand.
    $current_brand = $view->current_entity;
    $wrapper = entity_metadata_wrapper('node', $current_brand);
    $brand_coes = $wrapper->field_brand_coes->value();

    global $user;
    foreach ($brand_coes as $brand_coe) {
      if ($user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter une formation',
          '/node/add/training/' . $current_brand->nid,
          array('query' => array('destination' => current_path()))
        );
        break;
      }
    }
  }
  // Training session dates sorting (Sorting setting in Views produce wrong result).
  elseif ($view->name == 'trainings' && $view->current_display == 'training_sessions') {
    $sessions = array();
    foreach ($view->result as $session) {
      $sessions[$session->field_field_session_dates[0]['raw']['value']] = $session;
    };
    // We sort the $sessions array by keys which are strings representing dates in ISO format.
    ksort($sessions);
    $view->result = $sessions;
  }
  elseif ($view->name == 'trainings' && $view->current_display == 'all_sessions') {
    drupal_add_js(drupal_get_path('module','crealead_trainings') . '/js/crealead_trainings_sessions.js');
  }
  elseif ($view->name == 'brand_agenda' && $view->current_display == 'attachment_2') {
    foreach ($view->result as $key => $value) {
      $delta = $value->field_data_field_session_dates_delta;

//      $markup = $view->result[$key]->field_field_related_training[0]['rendered']['#markup'];
//      $ellipsis = ' ';
//      $nb_chars = 20;
//      if (strlen($markup) > $nb_chars) {
//        $ellipsis = '... ';
//      }
//      $view->result[$key]->field_field_related_training[0]['rendered']['#markup'] = substr($markup, 0, 20) . $ellipsis . '(jour ' . ($delta + 1) . ')';

      $view->result[$key]->field_field_related_training[0]['rendered']['#markup'] .= ' (jour ' . ($delta + 1) . ')';
    }
  }
  elseif ($view->name == 'trainings_calendar_prod') {
    foreach ($view->result as $key => $value) {
      $delta = $value->field_data_field_session_dates_delta;
      $view->result[$key]->field_field_related_training[0]['rendered']['#markup'] .= ' (J' . ($delta + 1) . ')';
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function crealead_trainings_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-trainings-list-page') {
    $form['title']['#field_suffix'] = 'Vous ne vous souvenez plus exactement du libellé ?<br /> Une lettre suffit pour lancer la recherche.';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_trainings_form_training_session_node_form_alter(&$form, &$form_state, $form_id) {
  // If session is being created from a training page,
  // we must catch the training nid from url
  // and select the corresponding training in field_related_training field.
  if (!isset($form['nid']['#value']) && NULL != arg(3)) {
    $form['field_related_training']['und']['#default_value'] = array(arg(3));
  }
  // If session is being modified and the current user is not the session author,
  // we must display the select list of auhor's trainings.
  elseif (isset($form['nid']['#value'])) {
    $session_author_trainings = views_get_view_result('trainings','user_trainings', $form['uid']['#value']);

    $options = array();
    if (!empty($session_author_trainings)) {
      foreach ($session_author_trainings as $training) {
          $options[$training->nid] = $training->node_title;
      }
    }

    $current_related_training = $form_state['node']->field_related_training['und'][0]['target_id'];
    $form['field_related_training']['und']['#options'] = $options;
    $form['field_related_training']['und']['#default_value'] = array($current_related_training);
  }
}

function crealead_trainings_get_next_sessions($training) {
  $query = new EntityFieldQueryExtraFields();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'training_session')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_related_training', 'target_id', $training->nid)
    ->addExtraField('', 'title', 'title', 'node')
    ->addExtraField('field_session_dates','value');

  $result = $query->execute();

  if (!empty($result)) {
    $sessions = $result['node'];
    $current_date = date('Y-m-d');
    $sessions_list = '';
    global $user;

    foreach ($sessions as $key=>$session) {
      $max_date = max($session->extraFields->field_session_dates_);
      if ($current_date <= substr($max_date,0,10)) {
        $sessions_list .=
          '<div class="views-row">' .
              '<a href="/node/' . $session->nid . '" class="colorbox-node" data-inner-width="600" data-inner-height="300">' .
                format_date(strtotime($session->extraFields->field_session_dates_[0]),'custom','d F Y') .
              '</a>';

              // If current user is the training author, we display an edit link for the listed session.
              if ($training->uid == $user->uid) {
                $sessions_list .=
                  '<span class="views-field views-field-edit-node">' .
                    '<a href="/node/' . $session->nid .'/edit?destination=node/' . $training->nid . '">' .
                      'modifier' .
                    '</a>' .
                  '</span>';
              }
          $sessions_list .= '</div>';
      }
    }

    return $sessions_list;
  }
}
