<?php
/**
 * @file
 * Code for the Profils feature.
 */

include_once 'crealead_profiles.features.inc';

/**
 * Implements hook_profile2_insert().
 */
function crealead_profiles_profile2_insert($profile) {
  if ($profile->field_saving_type['und'][0]['value'] == 1) {
    crealead_send_mail_to_referent($profile);
    $profile_wrapper = entity_metadata_wrapper('profile2', $profile->pid);
    $profile_wrapper->field_email_sent = 1;
    $profile_wrapper->save();
  }
}

/**
 * Implements hook_profile2_update().
 */
function crealead_profiles_profile2_update($profile) {
  // Validation request has to be sent only if field_saving_type = 1 and field_email_sent = 0.
  if ($profile->field_saving_type['und'][0]['value'] == 1 ) {
    if ($profile->field_email_sent['und'][0]['value'] == 0) {
      crealead_send_mail_to_referent($profile);
      $profile->field_email_sent['und'][0]['value'] = 1;
      entity_save('profile2', $profile);
    }
  }
}

function crealead_send_mail_to_referent($profile) {
  $user_wrapper = entity_metadata_wrapper('user', $profile->uid);

  // Sends email to referent only if user has a referent.
  if (isset($user_wrapper->field_user_referent)) {
    $referent_uid = $user_wrapper->field_user_referent->raw();
    $referent_wrapper = entity_metadata_wrapper('user', $referent_uid);
    $referent_email = $referent_wrapper->mail->raw();
    $referent_fullname = $referent_wrapper->field_user_firstname->raw() . ' ' . $referent_wrapper->field_user_lastname->raw();

    // Build email message to referent.
    $to = $referent_email;
    $from = variable_get('site_mail');
    $mail_subject = '[Site web Crealead] Demande de validation de profil';
    $mail_body = $user_wrapper->field_user_firstname->raw() . ' ' . $user_wrapper->field_user_lastname->raw()
      . ' a demandé la validation de son profil entrepreneur : http://' . $_SERVER['HTTP_HOST'] . '/user/' . $profile->uid . '/edit/coe_page';
    $params = array('subject' => $mail_subject, 'body' => $mail_body);

    $type = 'status';
    if (drupal_mail('crealead_profiles', 'profile_validation_request', $to, language_default(), $params, $from)) {
      $message = t('Validation request email message sent successfully to %fullname (%to)', array('%fullname' => $referent_fullname, '%to' => $to));
    }
    else {
      $message = t('Email message could not be sent to %fullname (%to)', array('%fullname' => $referent_fullname, '%to' => $to));
      $type = 'warning';
    }
    drupal_set_message($message, $type);
  }
}

/**
 * Implements hook_mail().
 */
function crealead_profiles_mail($key, &$message, $params) {
  switch ($key) {
    case 'profile_validation_request':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_form_profile2_form_alter().
 */
function crealead_profiles_form_profile2_form_alter(&$form, &$form_state) {
  switch($form['#user_category']) {
    case 'coe_page':
      // Shows field_coe_pub_status to following roles only : administrateur, webmaster, referent.
      global $user;
      $allowed_roles = array('administrateur','webmaster','référent');
      $user_allowed_roles = array_intersect($allowed_roles, $user->roles);
      if ($user->uid != 1 && empty($user_allowed_roles)) {
        $form['profile_coe_page']['field_coe_pub_status']['#access'] = FALSE;
      }

      // If field field_saving_type equals 1, validation request email has been sent.
      // The field has to be hidden.
      if (isset($form_state['profiles']['coe_page']->field_saving_type)) {
        //dpm($form_state['profiles']['coe_page']->field_saving_type['und'][0]['value']);
        if ($form_state['profiles']['coe_page']->field_saving_type['und'][0]['value'] == 1) {
          $form['profile_coe_page']['field_saving_type']['#access'] = FALSE;
        }
      }

      // Field field_email_sent must be hidden systematically (technical field).
      $form['profile_coe_page']['field_email_sent']['#access'] = FALSE;
      break;

    default:
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_profiles_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // On business sector search result pages, competencies filter MUST display
  // only terms associated to listed entrepreneurs.
  if ($form['#id'] == 'views-exposed-form-entrepreneurs-page-business-sector') {
    // We get the competency term ids from a view created for this particular purpose,
    $view = views_get_view('entrepreneurs');
    $view->set_display('page_business_sector_competencies_terms');
    $view->set_arguments(array(arg(2)));
    $view->execute();
    // and we stored them in the $term_ids array.
    $term_ids = array();
    foreach ($view->result as $result) {
      $term_ids[] = $result->field_data_field_competencies_field_competencies_tid;
    }

    // Then, competency terms are removed from the filter options if they don't belong to the $term_ids array.
    $options = $form['field_competencies_tid']['#options'];
    foreach ($options as $key=>$option) {
      if ($key != 'All' && !in_array($key,$term_ids)) {
        unset($options[$key]);
      }
    }
    $form['field_competencies_tid']['#options'] = $options;
  }

  if($form['#id'] == 'views-exposed-form-entrepreneurs-block-coe-reco') {
    $view = views_get_view('entrepreneurs');
    $view->set_display('block_recom_comp');
    $view->set_arguments(array(arg(2)));
    $view->execute();

    $term_ids = array();
    foreach ($view->result as $result) {
      $term_ids[] = $result->taxonomy_term_data_field_data_field_competencies_tid;
    }

    $options = $form['field_competencies_tid']['#options'];
    foreach ($options as $key=>$option) {
      if ($key != 'All' && !in_array($key,$term_ids)) {
        unset($options[$key]);
      }
    }
    $form['field_competencies_tid']['#options'] = $options;
  }
}

/**
 * Implements hook_views_pre_render().
 */
/**
 * Implements hook_views_pre_view().
 */
/**
 * Implements hook_views_pre_render().
 */
function crealead_profiles_views_pre_render(&$view) {
  if ($view->current_display == 'search_page') {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), '<front>');
    $breadcrumb[] = l('Entrepreneurs', 'entrepreneurs');
    drupal_set_breadcrumb($breadcrumb);
  }
  if ($view->current_display == 'page_business_sector' || $view->current_display == 'page_themes') {
    $term = taxonomy_term_load(arg(2));
    $view->build_info['title'] = $term->name;

    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), '<front>');
    $breadcrumb[] = l('Entrepreneurs', 'entrepreneurs');
    drupal_set_breadcrumb($breadcrumb);
  }

  // Plural form of the entrepreneurs results count handled on the 4 following displays only.
  $displays_list = array(
    'page_business_sector',
    'page_competencies_brands',
    'page_clients',
    'page_themes'
  );
  if ($view->name == 'entrepreneurs' && in_array($view->current_display, $displays_list)) {
    if (count($view->result) < 2) {
      $view->display_handler->handlers['header']['result']->options['content'] =
        str_replace('personnes', 'personne', $view->display_handler->handlers['header']['result']->options['content']);
    }
  }
}

function crealead_profiles_block_view_alter(&$data, $block) {
  if ($block->bid == 'views-entrepreneurs-block_coe_reco') {
    $profile = profile2_load(arg(2));
    $data['subject'] = $profile->field_coe_brand_name['und'][0]['value'] . $data['subject'];
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function crealead_profiles_block_view_entrepreneurs_block_coe_reco_alter(&$data, $block) {
  //dpm($data);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_profiles_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // if logged user who creates new user is referent, this new user's role must have 'entrepreneur' as default role.
  if (in_array('référent', $user->roles)) {
    $form_roles = $form['account']['roles'];
    $entrepreneur_rid = user_role_load_by_name('entrepreneur')->rid;
    $entrepreneur_role = array(
      $entrepreneur_rid => array(
        '#default_value' => TRUE,
      ));
    $form['account']['roles'] = $form_roles + $entrepreneur_role;
  }
}