<?php
/**
 * @file
 * Code for the Profils feature.
 */

include_once 'crealead_profiles.features.inc';

/**
 * Implements hook_profile2_insert().
 */
function crealead_profiles_profile2_insert($profile) {
  if ($profile->type == 'coe_page') {
    if ($profile->field_saving_type['und'][0]['value'] == 1) {
      crealead_send_mail_to_referent($profile);
      $profile_wrapper = entity_metadata_wrapper('profile2', $profile->pid);
      $profile_wrapper->field_email_sent = 1;
      $profile_wrapper->save();
    }
  }
}

/**
 * Implements hook_profile2_update().
 */
function crealead_profiles_profile2_update($profile) {
  if ($profile->type == 'coe_page') {
    // Validation request has to be sent only if field_saving_type = 1 and field_email_sent = 0.
    if ($profile->field_saving_type['und'][0]['value'] == 1) {
      if ($profile->field_email_sent['und'][0]['value'] == 0) {
        crealead_send_mail_to_referent($profile);
        $profile->field_email_sent['und'][0]['value'] = 1;
        entity_save('profile2', $profile);
      }
    }
  }
}

function crealead_send_mail_to_referent($profile) {
  $user_wrapper = entity_metadata_wrapper('user', $profile->uid);

  // Sends email to referent only if user has a referent.
  if (isset($user_wrapper->field_user_referent)) {
    $referent_uid = $user_wrapper->field_user_referent->raw();
    $referent_wrapper = entity_metadata_wrapper('user', $referent_uid);
    $referent_email = $referent_wrapper->mail->raw();
    $referent_fullname = $referent_wrapper->field_user_firstname->raw() . ' ' . $referent_wrapper->field_user_lastname->raw();

    // Build email message to referent.
    $to = $referent_email;
    $from = variable_get('site_mail');
    $mail_subject = '[Site web Crealead] Demande de validation de profil';
    $mail_body = $user_wrapper->field_user_firstname->raw() . ' ' . $user_wrapper->field_user_lastname->raw()
      . ' a demandé la validation de son profil entrepreneur : http://' . $_SERVER['HTTP_HOST'] . '/user/' . $profile->uid . '/edit/coe_page';
    $params = array('subject' => $mail_subject, 'body' => $mail_body);

    $type = 'status';
    if (drupal_mail('crealead_profiles', 'profile_validation_request', $to, language_default(), $params, $from)) {
      $message = t('Validation request email message sent successfully to %fullname (%to)', array('%fullname' => $referent_fullname, '%to' => $to));
    }
    else {
      $message = t('Email message could not be sent to %fullname (%to)', array('%fullname' => $referent_fullname, '%to' => $to));
      $type = 'warning';
    }
    drupal_set_message($message, $type);
  }
}

/**
 * Implements hook_mail().
 */
function crealead_profiles_mail($key, &$message, $params) {
  switch ($key) {
    case 'profile_validation_request':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_form_profile2_form_alter().
 */
function crealead_profiles_form_profile2_form_alter(&$form, &$form_state) {
  switch($form['#user_category']) {
    case 'coe_page':
      // Shows field_coe_pub_status and field_leaving_date to following roles only : administrateur, webmaster, referent.
      global $user;
      $allowed_roles = array('administrateur','webmaster','référent');
      $user_allowed_roles = array_intersect($allowed_roles, $user->roles);
      if ($user->uid != 1 && empty($user_allowed_roles)) {
        $form['profile_coe_page']['field_coe_pub_status']['#access'] = FALSE;
        $form['profile_coe_page']['field_leaving_date']['#access'] = FALSE;
      }

      // If field field_saving_type equals 1, validation request email has been sent.
      // The field has to be hidden.
      if (isset($form_state['profiles']['coe_page']->field_saving_type)) {
        //dpm($form_state['profiles']['coe_page']->field_saving_type['und'][0]['value']);
        if ($form_state['profiles']['coe_page']->field_saving_type['und'][0]['value'] == 1) {
          $form['profile_coe_page']['field_saving_type']['#access'] = FALSE;
        }
      }

      // Field field_email_sent must be hidden systematically (technical field).
      $form['profile_coe_page']['field_email_sent']['#access'] = FALSE;

        /////////////////// Gestion du widget Socialfield //////////////////////
        // Tant qu'aucun réseau n'a été enregistré, le formulaire affiche les x champs vides,
        // soit un par réseau activé dans le paramétrage du module socialfield.
        // Dès qu'on a enregistré un premier réseau, le formulaire n'affiche plus que le champ de ce réseau
        // + un SELECT pour ajouter un autre réseau qui fonctionne avec un callback Ajax.
        // La suppression d'un réseau via le bouton RETIRER  fonctionne aussi avec ajax.
        //
        // PB : Ces deux mécanismes (ajout/retrait) fonctionnent bien pour une marque et un pole.
        // Ils ne fonctionnent pas du tout pour le profil entrepreneur.
        // Donc on fait en sorte que les x champs de réseau sociaux soient toujours tous affichés
        // (ceux qui sont déjà enregistrés + un champ vide pour chaque réseau encore disponible).
        // et on désactive le SELECT.

//        // On récupère le champ Réseaux sociaux.
//        $social_buttons = $form['profile_coe_page']['field_social_links']['und']['social_buttons'];
//        // On récupère la liste des réseaux qu'il est possible de rajouter
//        $options = $social_buttons['add_one_social']['#options'];
//
//        // Si on a accès au SELECT, c'est qu'au moins un réseau a déjà été enregistré.
//        // Donc par défaut, on n'a plus que le ou les réseaux déjà enregistrés + le SELECT pour en ajouter d'autres.
//        if ($social_buttons['add_one_social']['#access']) {
//            // on récupère les réseaux enregistrés.
//            $registered_networks = array_filter($social_buttons, function ($key) {
//                return (substr($key,0, 8) == 'element_') ? true : false;
//            }, ARRAY_FILTER_USE_KEY);
//
//            // on récupère le poids du dernier de la liste
//            $last_current_element = end($registered_networks);
//            $last_weight = $last_current_element['weight']['#default_value'];
//
//            // On vire la première entrée de la liste des réseaux disponibles (c'est l'option "Ajouter").
//            array_shift($options);
//
//            if (count($options) > 0 ) {
//                $index = count($registered_networks); // pour connaitre le prochain 'element_x' à ajouter.
//                $weight = $last_weight + 1; // poids du prochain élement = poids du dernier enregistré + 1
//
//                foreach ($options as $key => $option) {
//                    // on commence par faire une copie du premier réseau enregistré (peu importe qui il est)
//                    $social_buttons['element_' . $index] = $social_buttons['element_0'];
//                    // puis on ajuste 4 données pour le réseau à ajouter.
//                    $social_buttons['element_' . $index]['url']['#default_value'] = ''; // pas encore d'url
//                    $social_buttons['element_' . $index]['weight']['#default_value'] = $weight; // son poids
//                    $social_buttons['element_' . $index]['#service'] = $key; // son nom (en minuscule)
//                    $form_state['services'][] = $key;
//                    $social_buttons['element_' . $index]['operation']['#name'] = 'element_' . $index; // ça devrait pas servir puisqu'on va cacher le bouton RETIRER.
//                    $index++;
//                    $weight += 1;
//                }
//            }
//            // On indique le nombre total d'elements à afficher.
//            // Si on ne touche pas à cette valeur, seuls les réseaux déjà enregistrés s'afficheront
//            // meme si $social_buttons contient tous les réseaux disponibles.
//            $social_buttons['#num_elements'] = $form_state['num_elements'] = count($registered_networks) + count($options);
//
////            $form_state['num_elements'] = count($registered_networks) + count($options);
//
//            // On vire le SELECT
//            unset($social_buttons['add_one_social']);
//
//            $form['profile_coe_page']['field_social_links']['und']['social_buttons'] = $social_buttons;
//
//            // IMPORTANT ! Il faut aussi agir sur le $form_state.
//            dpm($form_state);
//
//        }
        ////////////// fin de  Gestion du widget Socialfield ///////////////////
      break;

    default:
      break;
  }
  $form['#after_build'][] = 'crealead_profiles_after_build';
}

/*
 * Things to do after profile2 form has been build (we are sure everything is there)
 * and just before rendering.
 */
function crealead_profiles_after_build($form, &$form_state) {
  // A kind of hack.
  // Remove the roleassign field displayed in profile2 form to users belonging to referent and/or webmaster roles.
  // Impossible to understand why this field is present for these roles.
  if (isset($form['account']['roleassign_roles'])) {
    unset($form['account']['roleassign_roles']);
  }
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_profiles_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // On business sector search result pages, competencies filter MUST display
  // only terms associated to listed entrepreneurs.
  if ($form['#id'] == 'views-exposed-form-entrepreneurs-page-business-sector') {
    // We get the competency term ids from a view created for this particular purpose,
    $view = views_get_view('entrepreneurs');
    $view->set_display('page_business_sector_competencies_terms');
    $view->set_arguments(array(arg(2)));
    $view->execute();
    // and we stored them in the $term_ids array.
    $term_ids = array();
    foreach ($view->result as $result) {
      $term_ids[] = $result->field_data_field_competencies_field_competencies_tid;
    }

    // Then, competency terms are removed from the filter options if they don't belong to the $term_ids array.
    $options = $form['field_competencies_tid']['#options'];
    foreach ($options as $key=>$option) {
      if ($key != 'All' && !in_array($key,$term_ids)) {
        unset($options[$key]);
      }
    }
    $form['field_competencies_tid']['#options'] = $options;
  }

  if($form['#id'] == 'views-exposed-form-entrepreneurs-block-coe-reco') {
    $view = views_get_view('entrepreneurs');
    $view->set_display('block_recom_comp');
    $view->set_arguments(array(arg(2)));
    $view->execute();

    $term_ids = array();
    foreach ($view->result as $result) {
      $term_ids[] = $result->taxonomy_term_data_field_data_field_competencies_tid;
    }

    $options = $form['field_competencies_tid']['#options'];
    foreach ($options as $key=>$option) {
      if ($key != 'All' && !in_array($key,$term_ids)) {
        unset($options[$key]);
      }
    }
    $form['field_competencies_tid']['#options'] = $options;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_profiles_views_pre_render(&$view) {
  if ($view->current_display == 'search_page') {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), '<front>');
    $breadcrumb[] = l('Entrepreneurs', 'entrepreneurs');
    drupal_set_breadcrumb($breadcrumb);
  }
  if ($view->current_display == 'page_business_sector' || $view->current_display == 'page_themes') {
    $term = taxonomy_term_load(arg(2));
    $view->build_info['title'] = $term->name;

    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), '<front>');
    $breadcrumb[] = l('Entrepreneurs', 'entrepreneurs');
    drupal_set_breadcrumb($breadcrumb);
  }

  // Plural form of the entrepreneurs results count handled on the 4 following displays only.
  $displays_list = array(
    'page_business_sector',
    'page_competencies_brands',
    'page_clients',
    'page_themes'
  );
  if ($view->name == 'entrepreneurs' && in_array($view->current_display, $displays_list)) {
    if (count($view->result) < 2) {
      $view->display_handler->handlers['header']['result']->options['content'] =
        str_replace('personnes', 'personne', $view->display_handler->handlers['header']['result']->options['content']);
    }
  }

  if ($view->name == 'structure_team' && $view->current_display == 'structure_profiles') {
    drupal_add_js(drupal_get_path('module', 'crealead_profiles') . '/js/crealead_structure_profiles.js');
  }
  if ($view->name == 'instances' && $view->current_display == 'instances_profiles') {
    drupal_add_js(drupal_get_path('module', 'crealead_profiles') . '/js/crealead_instances_profiles.js');
  }
  if ($view->name == 'coe_directory' && $view->current_display == 'coes_entries') {
    drupal_add_css(drupal_get_path('module', 'crealead_profiles') . '/css/crealead_profiles_entries_leavings.css');
  }

  // Modif requise par la carte Trello V3 S11-3 :
  // https://trello.com/c/RXeJ37B8/522-11-3-compl%C3%A9ter-les-profils-autres-que-coe-et-ouvrir-les-fiches-depuis-les-pages-instances-et-%C3%A9quipe
  // Dans la page d'un utilisateur (/users/uid), on affiche les marques de cet utilisateur
  // seulement si c'est son profil coe qui est demandé (profile_coe_page), c'est-à-dire si aucun paramètre GET n'est passé.
  // Sinon, dès qu'on a .../user/username?profile=blablabla, on vide la vue des marques du coe.
  if ($view->current_display == 'coe_brands') {
      if ('user' == arg(0) && drupal_get_query_parameters())
      $view->result = array();
  }
}

function crealead_profiles_block_view_alter(&$data, $block) {
  if ($block->bid == 'views-entrepreneurs-block_coe_reco') {
    $profile = profile2_load(arg(2));
    $data['subject'] = $profile->field_coe_brand_name['und'][0]['value'] . $data['subject'];
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function crealead_profiles_block_view_entrepreneurs_block_coe_reco_alter(&$data, $block) {
  //dpm($data);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_profiles_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // If logged user who creates new user has referent role, this new user's role must have 'entrepreneur' as default role.
  // But assignable roles checkboxes field is not yet available. Must be handled after build.
  if (in_array('référent', $user->roles)) {
    $form['#after_build'][] = 'crealead_assignable_roles';
  }
}

function crealead_assignable_roles(&$form, &$form_state) {
  $entrepreneur_rid = user_role_load_by_name('entrepreneur')->rid;
  $form['account']['roleassign_roles'][$entrepreneur_rid]['#checked'] = TRUE;

  return $form;
}

function crealead_profiles_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $user_allowed_profiles = crealead_profiles_get_allowed_profiles($form['#user']);
  $params = array('user_allowed_profiles' => $user_allowed_profiles);

  drupal_add_js(array('crealead_profiles' => $params), 'setting');
  drupal_add_js(drupal_get_path('module', 'crealead_profiles') . '/js/crealead_user_profiles.js');
}


function crealead_profiles_get_allowed_profiles($user) {
  // Roles corresponding to a profile
  $strucutre_roles_machine_names = array(
    'direction',
    'referent',
    'pole_gestion',
    'assistant',
    'provider',
    'ca',
    'dup',
  );

  // User roles
  $user_roles = $user->roles;
  array_shift($user_roles);
  $profile_user_roles = array();

  // Fetch user roles machine name and store it if is a profile_role.
  foreach($user_roles as $role) {
    $roleObject = user_role_load_by_name($role);
    if ($roleObject->machine_name == 'entrepreneur') {
      $profile_user_roles[] = 'coe_page';
    }
    elseif ($roleObject->machine_name && in_array($roleObject->machine_name, $strucutre_roles_machine_names)) {
      // Handles Pôle gestion machine name role (originally wrongly named).
      if ($roleObject->machine_name == 'pole_gestion') {
        $profile = 'management';
      }
      else {
        $profile = $roleObject->machine_name;
      }

      $profile_user_roles[] = $profile . '_page';
    }
  }

  return $profile_user_roles;
}

/**
 * Implements hook_entity_view_alter().
 */
function crealead_profiles_entity_view_alter(&$build, $type) {
  if ($type == 'profile2' && $build['#view_mode'] == 'account' && $build['#bundle'] == 'coe_page') {
    global $user;
    $allowed_roles = array('administrateur','webmaster','référent','pôle gestion');
    $user_allowed_roles = array_intersect($allowed_roles, $user->roles);
    if ($user->uid != 1 && empty($user_allowed_roles)) {
      unset($build['field_coopins_balance']);
    }
  }
}

function crealead_profiles_form_profile2_edit_coe_page_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'crealead_brands') . '/css/crealead_brands_sortable.css');

  // Seek user's brands list (title and nid only)
  $user_brands = views_get_view_result('brands', 'coe_brands2', $form['#user']->uid);

  // If user has more than one brand.
  if (!empty($user_brands) && count($user_brands) > 1) {
    drupal_add_js(drupal_get_path('module', 'crealead_brands') . '/js/crealead_brands_sortable.js');

    // Seek the previous brands order, stored in field_brands_order (looks like 125|658|445).
    $user_ordered_brand_ids =
      explode('|', $form['profile_coe_page']['field_brands_order']['und'][0]['value']['#default_value']);

    // If brands have never been sorted, $user_ordered_brands_ids array contains an empty string as unique value.
    // So we must display brands with the user's previous order only if this array has more than one value.
    if (count($user_ordered_brand_ids) > 1) {

      $user_ordered_brands = [];
      foreach ($user_ordered_brand_ids as $brand_id) {
        foreach ($user_brands as $item) {
          if ($item->nid == $brand_id) {
            $user_ordered_brands[] = $item;
          }
        }
      }

      $brands_to_display = $user_ordered_brands;
    }
    // Else we just display brands as stored in the database (default alphabetical order).
    else {
      $brands_to_display = $user_brands;
    }

    $brands_list = '<div id="coe-brands-list">';
    $brands_list .= '<div id="coe-brands-list-title">Mes marques</div>';
    $brands_list .= '<div id="coe-brands-list-description" class="description">'
      . 'Vous pouvez modifier l\'ordre d\'affichage de vos marques par un glisser/déposer vers la droite ou vers la gauche'
      . '</div>';
    $brands_list .= '<div id="sortable-brands-container">';
    $brands_list .= '<ul id="sortable-brands">';
    foreach ($brands_to_display as $brand) {
      $brands_list .= '<li id="' . $brand->nid . '">' . $brand->node_title . '</li>';
    }
    $brands_list .= '</ul>';
    $brands_list .= '<div id="brands-order-saving-notice" class="description">'
      . 'Vos modifications seront prises en compte qu\'après avoir cliqué sur <b>Enregistrer</b>'
      . '</div>';
    $brands_list .='</div></div>';

    $field_brands_order_weight = $form['profile_coe_page']['field_brands_order']['#weight'];

    $form['profile_coe_page']['field_brands_sorting'] = array(
      '#markup' => $brands_list,
      '#weight' => $field_brands_order_weight,
    );

    $form['profile_coe_page']['field_brands_order']['#weight'] = $field_brands_order_weight + 1;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function crealead_profiles_views_query_alter(&$view, &$query) {
    if ($view->name == 'coe_directory') {
        // Liste des coes entrants - on utilise le nombre de mois qui a été paramétré via la page d'admin "Entrées/Sorties des coes".
        if ($view->current_display == 'coes_entries') {
            $entries_range = variable_get('crealead_entries_range');
            $date = new DateTime();
            $date->modify('- ' . $entries_range . ' months');

            // On cherche à quel index est la condition 'Profil:Date de création > x mois'
            // pour éviter le bug SQLSTATE[42S22]: Column not found: 1054 Unknown column 'profile.created1547717089' in 'where clause'
            // si l'on change l'ordre des critères de filtrage dans l'admin de la vue coe_directory/coes_entries.
            $created_condition_key = 0;
            foreach($query->where[1]['conditions'] as $key=>$condition) {
                if (strstr($condition['field'], 'profile.created')) {
                    $created_condition_key = $key;
                }
            }
            // On utilise l'index trouvé pour mettre dans la condition la valeur enregistrée dans l'écran de paramétrage.
            $query->where[1]['conditions'][$created_condition_key]['field'] = 'profile.created > ' . $date->getTimestamp();

        }
        // Liste des coes partis - on utilise le nombre de mois qui a été paramétré via la page d'admin "Entrées/Sorties des coes".
        elseif ($view->current_display == 'coes_leavings') {
            $leavings_range = variable_get('crealead_leavings_range');
            $date = new DateTime();
            $date->modify('- ' . $leavings_range . ' months');

            // On fait la meme recherche d'index que pour la vue coes_entries ci-dessus, pour la meme raison.
            $leaving_condition_key = 0;
            foreach ($query->where[1]['conditions'] as $key=>$condition) {
                if (strstr($condition['field'], 'field_leaving_date_value')) {
                    $leaving_condition_key = $key;
                }
            }
            $query->where[1]['conditions'][$leaving_condition_key]['value'][':field_data_field_leaving_date_field_leaving_date_value'] = $date->format('Y-m-d');
        }
    }
}

/**
 * Implements hook_menu().
 */
function crealead_profiles_menu() {
    $items['admin/config/crealead/entries-leavings'] = array(
        'title' => 'Entrées/Sorties des coes',
        'description' => 'Paramétrage des entrées et sorties des coes.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('crealead_profiles_entries_leavings_settings_form'),
        'access arguments' => array('administer crealead settings'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'crealead_profiles.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_user_view_alter().
 */
function crealead_profiles_user_view_alter(&$build) {
    // On récupère les paramètres GET de l'url.
    $params = drupal_get_query_parameters();
    // Si le parametre 'profile' est passé dans l'url, on affiche seulement le profil correspondant
    if (isset($params['profile']) ) {
        foreach($build as $key => $value) {
            if ((strpos($key, 'profile_') !== FALSE) && ($key != 'profile_' . $params['profile'])) {
                unset($build[$key]);
            }
        }
    }
    // Sinon, si n'y a pas de parametre GET, c'est qu'on veut le profil coe.
    else {
        foreach($build as $key => $value) {
            if (strpos($key, 'profile_') !== FALSE && $key != 'profile_coe_page') {
                unset($build[$key]);
            }
        }
    }
}
