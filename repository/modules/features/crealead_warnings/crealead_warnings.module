<?php
/**
 * @file
 * Code for the Alertes feature.
 */

include_once 'crealead_warnings.features.inc';

/**
 * Implements hook_menu().
 */
function crealead_warnings_menu() {
  $items['admin/config/crealead/warnings'] = array(
    'title' => 'Alertes',
    'description' => 'Paramétrage des alertes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crealead_warnings_settings_form'),
    'access arguments' => array('administer crealead settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'crealead_warnings.admin.inc',
  );

  $items['user/%user/warnings'] = array(
    'title' => t('Mes alertes'),
    'page callback' => 'crealead_warnings_user_warnings',
    'page arguments' => array(1),
    'access callback' => 'crealead_warnings_warnings_list_access',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Callback function to handle the "Mes alertes" tab on user page.
 *
 * @return bool True if visitor is the visited user, otherwise false
 */
function crealead_warnings_warnings_list_access() {
  global $user;
  if (arg(0) == 'user' && arg(1) == $user->uid) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_warnings_form_warning_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','crealead_warnings') . '/js/crealead_warnings.js');
  drupal_add_css(drupal_get_path('module','crealead_warnings') . '/css/crealead_warnings.css');

  // Content types select list preparation.
  $options = crealead_warnings_get_warnable_content_types();
  asort($options);

  // Creation of an on-fly content types list select field.
  $form['field_content_type_list'] = array(
    '#type' => 'select',
    '#title' => 'Type de contenu',
    '#description' => 'Sélectionnez le type de contenu pour lequel vous créez cette alerte.',
    '#required' => TRUE,
    '#options' => $options,
  );

  // If node creation
  if (!isset($form['nid']['#value'])) {
    $query_params = drupal_get_query_parameters();

    if (isset($query_params['type'])) {
      $form['field_content_type_list']['#default_value'] = array($query_params['type']);
      $form['field_content_type_list']['#attributes'] = array('disabled' => TRUE);
      $form['field_content_type_list']['#description'] = '';

      $form['field_content_type_value']['und'][0]['value']['#default_value'] = array($query_params['type']);
    }

    global $user;
    $form['field_recipient_email']['und'][0]['email']['#default_value'] = $user->mail;
  }
  else {
    $form['field_content_type_list']['#default_value'] = $form['field_content_type_value']['und'][0]['value']['#default_value'];
  }

    // Info text field added at the top of form
  $info_text =
    '<p class="info-text">' .
    'Les événéments correspondant à votre alerte (création/modification d\'une demande, d\'une offre...) généreront des notifications immédiates.' .
    '</p>';
  $form['info_text'] = array(
    '#type' => 'item',
    '#title' => 'A NOTER',
    '#markup' => $info_text,
    '#weight' => -10
  );
}

function crealead_warnings_get_warnable_content_types () {
  // Fetch all content types, but 'Alerte'.
  $types = node_type_get_types();
  unset($types['warning']);

  // Fecth all content types activated for warnings.
  $activated_content_types = variable_get('warning_content_types');

  // Build array to be returned.
  $warnable_content_types = array();
  foreach ($activated_content_types as $machine_name=>$value) {
    if ($value) {
      $warnable_content_types[$machine_name] = $types[$machine_name]->name;
    }
  }
  asort($warnable_content_types);

  return $warnable_content_types;
}
/**
 * Implements hook_block_view_alter().
 */
function crealead_warnings_block_view_alter(&$data, $block) {
  if (user_is_logged_in() && $block->module == 'views' && substr($block->delta,0,4) != '-exp') {
    // Get the content types that users can create warnings on.
    $warning_content_types = array_filter(variable_get('warning_content_types', array()));

    // Get the content type name the current block view uses, if any.
    // TODO : Handle cases where view block uses more than one content type.
    $view = views_get_view(substr($block->delta, 0, strpos($block->delta,'-')));
    $display = substr($block->delta, strpos($block->delta,'-') +1);
    $view->set_display($display);
    $view->pre_execute();
    $content_type = (isset($view->filter['type']->value)) ? key($view->filter['type']->value) : null;

    // If current view block manipulates content type that is warning allowed,
    // we can display warning handling links at the bottom of block.
    if ($content_type && in_array($content_type, $warning_content_types)) {
      global $user;
      $user_warnings_count = crealead_warnings_get_user_warnings($user->uid, TRUE);
      $warning_links = '<span class="warning-add-link">'
        . '<a href="/node/add/warning?type=' . $content_type . '&destination=/user/' . $user->uid . '/warnings">Ajouter une alerte</a>'
        . '</span>';

      if ($user_warnings_count > 0) {
        $warning_links .= ' | <span class="warning-list-link">'
          . '<a href="/user/' . $user->uid . '/warnings">Gérer mes alertes</a>'
          . '</span>';
      }
      $data['content']['#markup'] .= '<div class="warning-links">' . $warning_links . '</div>';
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_warnings_views_pre_render(&$view) {
  if ($view->name == 'warnings' && $view->current_display == 'user_warnings') {
    global $user;
    $action_link =
      '<div class="warning-links">' .
        '<span class="warning-add-link">' .
          '<a href="/node/add/warning?destination=/user/' . $user->uid . '/warnings">Ajouter une alerte</a>' .
        '</span>' .
      '</div>';

    $view->attachment_after = $action_link;
  }
  if ($view->name == 'warnings') {
    $warnable_content_types = crealead_warnings_get_warnable_content_types();
    foreach ($view->result as $item) {
      $markup = $item->field_field_content_type_value[0]['rendered']['#markup'];
      $item->field_field_content_type_value[0]['rendered']['#markup'] = $warnable_content_types[$markup];
    }
  }
}

function crealead_warnings_get_user_warnings($uid, $count=false) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'warning')
    ->propertyCondition('status', 1)
    ->propertyCondition('uid', $uid);
  $result = $query->execute();

  if ($count) {
    if (isset($result['node'])) {
      return sizeof($result['node']);
    }

    return 0;
  }

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return $nids;
  }

  return array();
}

function crealead_warnings_user_warnings() {
  if (module_exists('crealead_warnings')) {
    return views_embed_view('warnings', 'user_warnings');
  }
  else {
    return "Cette fonctionnalité n'est pas activée.";
  }
}


/**
 * Implements hook_node_postinsert().
 */
function crealead_warnings_node_postinsert($node) {
  $warnable_content_types = crealead_warnings_get_warnable_content_types();
  if (!empty($warnable_content_types) && in_array($node->type, array_keys($warnable_content_types))) {
    $email_addresses = crealead_warnings_get_email_addresses($node,1);

    if (!empty($email_addresses)) {
      watchdog('crealead_warnings', "The inserted node {$node->type} id is {$node->nid}. The email addresses are : {$email_addresses}.");
      crealead_warnings_send_warning_email($email_addresses, $node, 'insert', $warnable_content_types);
    }
  }
}

/**
 * Implements hook_node_postupdate().
 */
function crealead_warnings_node_postupdate($node) {
  $warnable_content_types = crealead_warnings_get_warnable_content_types();
  if (!empty($warnable_content_types) && in_array($node->type, array_keys($warnable_content_types))) {
    $email_addresses = crealead_warnings_get_email_addresses($node,2);

    if (!empty($email_addresses)) {
      watchdog('crealead_warnings', "The updated node {$node->type} id is {$node->nid}. The email addresses are : {$email_addresses}.");
      crealead_warnings_send_warning_email($email_addresses, $node, 'update', $warnable_content_types);
    }
  }
}

/**
 * Return email addresses of registered warnings whose keywords match updated node title and/or body.
 *
 * @param string $node The node that as just been updated.
 * @param int $when 1=insert, 2=insert and update.
 * @param int $frequency 1=immediately, 2=daily, 3=weekly.
 *
 * @return string A string containing the list of emails to use, or an empty string.
 */
function crealead_warnings_get_email_addresses($node, $when=1, $frequency=1) {
  // Fetch warnings from database
  $query = new EntityFieldQueryExtraFields();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'warning')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_content_type_value','value', $node->type)
    ->fieldCondition('field_warning_frequency','value', $frequency)
    ->addExtraField('field_recipient_email','email')
    ->addExtraField('field_warning_keywords','value')
    ->propertyOrderBy('created', 'DESC');

  // On node update, we must seek for warnings whose When value = 2.
  // But on node insertion, we must seek both values 1 and 2, which means that we don't need this criterion.
  if ($when == 2) {
    $query->fieldCondition('field_warning_when', 'value', $when);
  }

  $result = $query->execute();

  // If results, keywords are tested again node title and body.
  $email_addresses = array();
  if (!empty($result)) {
    $warnings = $result['node'];
    $haystack = $node->title . ' ' .$node->body['und'][0]['value'];

    foreach ($warnings as $key=>$warning) {
      // Warning's keywords field cleaned up and prepared for regex.
      // For instance, the ugly field value " , keyword1, , keyword2 keyword3, " is converted into "keyword1|keyword2 keyword3".
      $keywords = $keywords = implode('|', array_filter(array_map('trim', explode(',', $warning->extraFields->field_warning_keywords_))));

      if( preg_match('/\b(' . $keywords . ')/i' , $haystack)){
        $email_addresses[$warning->extraFields->field_recipient_email_] = $warning->extraFields->field_recipient_email_;
      }
    }
    $email_addresses = implode(';', $email_addresses);
  }

  return $email_addresses;
}

function crealead_warnings_send_warning_email($email_addresses, $node, $op, $warnable_content_types) {

  // Email message building
  $to = $email_addresses;
  //$from = variable_get('site_mail');
  $from = "no-reply@crealead.com";
  $host = $_SERVER['HTTP_HOST'];

  $operation = ($op == 'insert') ? 'création' : 'modification';
  $verb = ($op == 'insert') ? 'créé' : 'modifié';
  $content_type = $warnable_content_types[$node->type];
  $mail_subject = '[Crealead Alertes] ' . ucfirst($operation) . ' d\'un contenu de type ' . $content_type;

  $mail_body = '<div id="crealead-email-body">' .
    '<br/>' .
    '<p>Bonjour,</p>'.
    '<p>Le contenu  <b><a href="http://' . $host . '/node/' . $node->nid . '">' . $node->title . '</a></b> (' . $content_type . ')' .
    ' correspondant à l\'une de vos alertes vient d\'être ' . $verb.'.</p>' .
    '</div>';

  $footer_image_fullpath = drupal_get_path('module','kcore') . '/images/bandeau-crealead.jpg';

  $mail_body .=
    '<br/><br/>' .
    '<p class="crealead-email-footer">' .
    '<img src="' . $footer_image_fullpath . '">' .
    '</p>';

  $params = array('subject' => $mail_subject, 'body' => $mail_body);

  if (drupal_mail('crealead_warnings', 'warning_email', $to, language_default(), $params, $from)) {
    $message = "Warning email for node {$node->nid} ({$op}) sent to " . sizeof(explode(';', $email_addresses)) . " recipients.";
  }
  else {
    $message = "Warning email sending failed.";
  }

  watchdog('crealead_warnings', $message);
}

/**
 * Implements hook_mail().
 */
function crealead_warnings_mail($key, &$message, $params) {
  switch ($key) {
    case 'warning_email':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_node_view().
 */
function crealead_warnings_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'warning' && ($view_mode == 'colorbox' || $view_mode == 'full')) {
    $type = node_type_load($node->content['field_content_type_value'][0]['#markup']);
    $node->content['field_content_type_value'][0]['#markup'] = $type->name;
  }
}
