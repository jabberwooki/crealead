<?php
/**
 * @file
 * Code for the Marques feature.
 */

include_once 'crealead_brands.features.inc';

/**
 * Implements hook_init().
 */
function crealead_brands_init() {
  $node = menu_get_object();
  if ((!empty($node) && $node->type == 'brand' && arg(2) != 'edit') || (arg(1) == 'add' && arg(2) == 'brand')) {
    drupal_add_js(drupal_get_path('module','crealead_brands') . '/js/crealead_brands.js');
    drupal_add_css(drupal_get_path('module','crealead_brands') . '/css/crealead_brands.css');
  }
  elseif (arg(0) == 'annuaire-entrepreneurs' && sizeof(arg()) == 1) {
    $params = array('brand_feature_path' => drupal_get_path('module', 'crealead_brands'));
    drupal_add_js(array('creaelad_brands_search' => $params), 'setting');
    drupal_add_js(drupal_get_path('module','crealead_brands') . '/js/crealead_brand_search.js');
  }
  elseif (request_uri() == '/node/add/client') {
    drupal_add_js(array('crealead_similar_clients' => array('ajaxUrl' => url('ajax/similar_clients'))), 'setting');
    drupal_add_js(drupal_get_path('module','crealead_brands') . '/js/crealead_brands_similar_clients.js');
    drupal_add_css(drupal_get_path('module','crealead_brands') . '/css/crealead_brands_clients.css');
  }

  drupal_add_js(drupal_get_path('module','crealead_brands') . '/js/crealead_sector_brands_menu.js');
}

/**
 * Implements hook_menu().
 */
function crealead_brands_menu() {
  $items['ajax/similar_clients'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'crealead_brands_similar_clients',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'delivery callback' => 'crealead_brands_similar_clients_list',
  );
  $items['crealead_brands_link_registered_client'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'crealead_brands_link_registered_client',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_brands_form_brand_node_form_alter(&$form, &$form_state, $form_id) {
  // We first fetch data required to decide how to alter form.
  // 1 - Current connected user allowed roles.
  global $user;
  $current_user_roles = $user->roles;
  $allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($allowed_roles, $current_user_roles);

  // 2 - Brand's author profile validation (NO LONGER TESTED)
//  $brand_author_profile_validated = 0;
//  if (isset($form['field_brand_coes']['und'][0]['#entity']->item_id)) {
//    $brand_author_uid = $form['uid']['#value'];
//    $brand_author_profile = profile2_load_by_user($brand_author_uid, 'coe_page');
//    if ($brand_author_profile) {
//      $brand_author_profile_validated = $brand_author_profile->field_coe_pub_status['und'][0]['value'];
//    }
//  }

  // 3 - Brand validation
  unset($form['field_brand_validated']['und']['#options']['_none']);
  $brand_validated = 0;
  if (isset($form['#node']->field_brand_validated['und'][0]['value'])) {
    $brand_validated = $form['#node']->field_brand_validated['und'][0]['value'];
  }

  // Then, what about non allowed users. They cannot do 4 distinct tasks:
  // 1 - validate brands,
  // 2 - publish brand nodes, unless brand has been validated by referent,
  // 3 - change business sectors after brand is validated,
  // 4 - link their brand to any sector brands,
  // 5 - link their brand to any certification/label.
  if (empty($current_user_allowed_roles) & $user->uid != 1) {
    // 1 - Brand validation radio buttons systematically disabled.
    $form['field_brand_validated']['und'][0]['#attributes'] = array('disabled' => TRUE);
    $form['field_brand_validated']['und'][1]['#attributes'] = array('disabled' => TRUE);

    // 2 - Publication options fieldset access is conditionally set to false.
    // The required conditions to publish brand is : the brand must be validated.
    if (!$brand_validated) {
      $form['options']['status']['#attributes'] = array('disabled' => TRUE);
      $form['options']['status']['#title'] =
        'Vous ne pouvez pas publier cette marque. ' .
        'Celle-ci n\'a pas encore été validée par votre référent.';
    }
    // 3 - Business sectors field disabled.
    else {
      $form['field_business_sector']['#disabled'] = TRUE;
    }
    // 4 - Sector brands field disabled.
    $form['field_related_sector_brands']['und']['#attributes'] = array('disabled' => TRUE);

    // 5 - Certifications/labels field disabled.
    $form['field_certifications_labels']['und']['#attributes'] = array('disabled' => TRUE);
  }
  // And now what about allowed users.
  else {
    // They cannot publish brands if they are not validated (by themselves or other allowed users).
    if (!$brand_validated) {
      $form['options']['status']['#attributes'] = array('disabled' => TRUE);
      $form['options']['status']['#title'] =
        'Vous ne pouvez pas publier cette marque. ' .
        'Celle-ci n\'a pas encore été validée.';
    }
  }

  // In any case, for brand nodes, promote and sticky publication options are removed.
  unset($form['options']['promote']);
  unset($form['options']['sticky']);

  // Fields temporarily removed from backoffice
  //$form['field_landing_pages']['#access'] = FALSE;

  // Handling of fields involved into validation workflow
  // 1 - field_saving_type
  unset($form['field_saving_type']['und']['#options']['_none']);
  // If field field_saving_type equals 1, validation request email has been sent. The field has to be hidden.
  if (isset($form['#node']->field_saving_type['und'][0]['value']) && $form['#node']->field_saving_type['und'][0]['value'] == 1) {
    $form['field_saving_type']['#access'] = FALSE;
  }
  // 2 - field_email_sent
  // It's a technical field, it must be systematically hidden.
  $form['field_email_sent']['#access'] = FALSE;

  // Move "Champs Crealed" vertical tab to the bottom.
  $form['#groups']['group_crealead_fields']->weight = 200;

  // Stuff that has to be done after form build.
  $form['#after_build'][] = 'crealead_brands_after_build';

  // If brand creation
  if (!isset($form['nid']['#value'])) {
    $params = array('name' => $form['#node']->name, 'uid' => $form['#node']->uid);
    drupal_add_js(array('crealead_brands_default_coe' => $params), 'setting');
  }

  // Hugly hack to remove no longer wanted field_brand_type option 'grande marque'
  // (For unknown reasons, its manual deletion causes saving bug in views admin).
  unset($form['field_brand_type']['und']['#options'][3]);
}

function crealead_brands_after_build($form, &$form_state) {
  // Make the field field_brand_search readonly.
  $form['field_brand_search']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
  $form_state['values']['field_brand_search']['und'][0]['value'] = $form['field_brand_search']['und'][0]['value']['#default_value'];

  return $form;
}

/**
 * Implements hook_node_presave().
 */
function crealead_brands_node_presave($node) {
  if ($node->type == 'brand') {
    $referer = request_uri();
    // --- Technical field_brand_search field handling --- //
    if ($referer != '/node/add/client' && !strstr($referer, 'crealead_brands_link_registered_client') && $referer != '/node/add/achievement') {
      $brand_name = $node->title . ' ';
      $coe_names = '';
      $coe_competencies = '';
      $brand_description = '';
      $brand_solutions = '';
      $brand_tags = '';
      $brand_certifs_labels = '';

      // Fetch all coes names and competencies linked to current brand.
      foreach ($node->field_brand_coes['und'] as $fc_item) {
        if (isset($fc_item['field_brand_coe'])) {
          $coe_id = $fc_item['field_brand_coe']['und'][0]['target_id'];
          $coe = user_load($coe_id);
          $coe_names .= $coe->name . ' ';

          foreach ($fc_item['field_competencies']['und'] as $competency) {
            $coe_competencies .= $competency['name'] . ' ';
          }
        }
      }

      // Check whether Description field has content.
      if (isset($node->body['und'][0]['value'])) {
//      $brand_description = strip_tags($node->body['und'][0]['value']);
        $brand_description = trim(preg_replace('/\s+/', ' ', strip_tags($node->body['und'][0]['value'])));
      }

      // Check whether Solutions field has content.
      if (isset($node->field_brand_solutions['und'][0]['value'])) {
        $brand_solutions = $node->field_brand_solutions['und'][0]['value'];
      }

      // Check whether Mots-clés field has content.
      if (!empty($node->field_brand_tags)) {
        foreach ($node->field_brand_tags['und'] as $tag) {
          // Two possibilities to reach this presave code :
          // - when a brand create/edit form is submitted
          // - when an achievment create/edit form is submitted
          // In second case, brand is saved as well (to link achiev being savec to selected brand when created from Content/Add page.
          // But in that case, field_brand_tags fiels contains only tids not names. So we must test before adding to keywords.
          if (isset($tag['name'])) {
            $brand_tags .= $tag['name'] . ' ';
          }
        }
      }

      // Check whether Certifications and Labels field has content.
      if (!empty($node->field_certifications_labels['und'])) {
        foreach ($node->field_certifications_labels['und'] as $certif_label_tid) {
          $term = taxonomy_term_load($certif_label_tid['tid']);
          $brand_certifs_labels .= $term->name . ' ';
        }
      }

      // Store brand name, coe names, competencies, solutions and tags into field_brand_search technical field.
      $search_data = $brand_name
        . $coe_names
        . $coe_competencies
        . $brand_description
        . $brand_solutions
        . $brand_tags
        . $brand_certifs_labels;
      $search_array = array('value' => $search_data, 'format' => 'plain_text');

      if (!isset($node->field_brand_search['und'][0])) {
        $node->field_brand_search['und'][] = $search_array;
      }
      else {
        $node->field_brand_search['und'][0] = $search_array;
      }
    }
    // ---  End of Technical field_brand_search field handling --- //

    // -- Email to referent handling -- //
    // NOTE ! Il brand has been validated by referent before coe sends them a validation request,
    // brand will never get a field_saving_type value. So, it must be tested first.
    if (!empty($node->field_saving_type['und']) && $node->field_saving_type['und'][0]['value'] == 1 && $node->field_email_sent['und'][0]['value'] == 0) {
      crealead_send_brand_mail_to_referent($node->uid, $node->nid, $node->title);
      $node->field_email_sent['und'][0]['value'] = 1;
    }

    // -- Brand publication handling -- //
    if (isset($node->original) && $node->original->field_brand_validated['und'][0]['value'] == 0 && $node->field_brand_validated['und'][0]['value'] == 1) {
      $node->status = 1;
    }
  }
}

/**
 * Implements hook_node_grants_alter().
 */
function crealead_brands_node_grants_alter(&$grants, $account, $op) {
  //var_dump($grants);
}

/**
 * Implements hook_block_info().
 */
function crealead_brands_block_info() {
  $blocks = array();
  $blocks['crealead_brands_number'] = array(
    'info' => t('Crealead : Nombre de grandes marques'),
  );
  $blocks['crealead_brands_contacts_list'] = array(
    'info' => t('Crealead : Liste des contacts email'),
  );
  $blocks['crealead_sector_brand_nav'] = array(
    'info' => t('Crealead : Menu de navigation de marque sectorielle'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crealead_brands_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'crealead_brands_number' :
      $brands_number_display = variable_get('brands_number', 1);

      if ($brands_number_display == 1) {
        $number = crealead_main_brands_number();
      }
      else {
        $number = variable_get('brands_number_value', '5');
      }

      $content = '<div class="number  brands-number">' . $number . '</div>';
      $content .= '<div class="text brands-text">' . 'grandes marques' . '</div>';
      $block['content'] = $content;
      break;

    case 'crealead_brands_contacts_list' :
      $block['content'] = crealead_brand_contacts_list();
      break;

    case 'crealead_sector_brand_nav':
      $current_path = current_path();
      $path_alias = drupal_get_path_alias($current_path);
//      $links = array(
//        'link1' => array('title' => 'Introduction', 'href' => '/' . $path_alias . '#introduction'),
//        'link2' => array('title' => 'Marques et produits', 'href' => '/' . $path_alias . '#brands-products'),
//        'link3' => array('title' => 'Réalisations', 'href' => '/' . $path_alias . '#achievements'),
//        'link4' => array('title' => 'Actualités et articles de fond', 'href' => '#news_articles'),
//      );
      $attributes = array('class' => 'nav navbar-nav');

      $current_sector_brand = menu_get_object('taxonomy_term', 2);

      $content = '<ul class="nav navbar-nav">';
      $content .= '<li class="item1 first"><a href="#">Introduction</a>';

      $news = views_get_view_result('news','sector_brand_news',$current_sector_brand->tid);
      $articles = views_get_view_result('articles','sector_brand_articles',$current_sector_brand->tid);
      if (!empty($news) || !empty($articles)) {
        $content .= '<li class="item4 last"><a href="#news-articles">Actualités et articles de fond</a>';
      }

      $brands = views_get_view_result('brands', 'sector_brand_brands', $current_sector_brand->tid);
      if (!empty($brands)) {
        $content .= '<li class="item2"><a href="#brands-products">Marques et produits</a>';
      }

      $achievements = views_get_view_result('achievements','sector_brand_achievs',$current_sector_brand->tid);
      if (!empty($achievements)) {
        $content .= '<li class="item3"><a href="#achievements">Réalisations</a>';
      }

      $content .= '</ul>';

      $block['content'] = $content; //theme('links', array('links' => $links, 'attributes' => $attributes));
      break;
  }

  return $block;
}

/**
 * Implements hook_entity_view().
 */
function crealead_brands_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'certifications_labels' && $view_mode == 'logo') {
    $entity->name = '';
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function crealead_brands_entity_view_alter(&$build, $type) {
  if ($build['#entity_type'] == 'entityform_type' && $build['#entity']->type == 'contact' && $build['#view_mode'] == 'full') {
    $build['#entity']->label = '';
    $build['#entity']->data['redirect_path'] = substr($_SERVER['REDIRECT_URL'],1);
  }

  if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'brand' && $build['#view_mode'] == 'full') {
    if (empty($build['#node']->field_brand_email)) {
      unset($build['field_contact_form']);
    }
  }

  if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'achievement' && $build['#view_mode'] == 'full') {
    // if achievement full node, there is no info about parent brand.
    // Brand knows achievements, achievements don't know their parent brand.
    $query = db_select('field_data_field_brand_achievements', 'fba');
    $query->addField('fba','entity_id');
    $query->condition('fba.field_brand_achievements_target_id', $build['#node']->nid);
    $brand_nid = $query->execute()->fetchField();
    $brand = node_load($brand_nid);
    
    if ($brand) {
      $build['achievement_brand'][0]['#markup'] = l($brand->title, '/node/' . $brand_nid);
    }
    else {
      unset($build['achievement_brand']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function crealead_brands_form_alter(&$form, &$form_state, $form_id) {
  // Handling of Contact form in brands full mode Contact tab
  if ($form_id == 'contact_entityform_edit_form') {
    // Fetch the current brand node.
    $node = menu_get_object();
    // If contact form exists (displayed only if brand's email field has been fulfilled),
    // brand name, nid and email added to "technical" form fields (hidden from view with via css).
    if (isset($node->field_contact_form)) {
      // Brand name added to form
      $form['field_contact_brand_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->title;
      // Brand nid added to form
      $form['field_brand_nid'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->nid;
      // Brand email added to form
      if (isset($node->field_brand_email['und'][0]['email'])) {
        $form['field_contact_brand_email'][LANGUAGE_NONE][0]['value']['#default_value'] =
          $node->field_brand_email['und'][0]['email'];
      }
    }
  }
}

/**
 * Implements hook_node_type_insert().
 */
/**
 * Implements hook_node_insert().
 */
//function crealead_brands_node_insert($node) {
//  if ($node->type == 'brand') {
//    if ($node->field_saving_type['und'][0]['value'] == 1) {
//      crealead_send_brand_mail_to_referent($node->uid, $node->nid, $node->title);
//      $node->field_email_sent['und'][0]['value'] = 1;
//    }
//  }
//}

/**
 * Implements hook_node_update().
 */
//function crealead_brands_node_update($node) {
//  if ($node->type == 'brand') {
//    // Validation request email has to be sent only if field_saving_type = 1 and field_email_sent = 0.
//    if ($node->field_saving_type['und'][0]['value'] == 1 && $node->field_email_sent['und'][0]['value'] == 0) {
//      crealead_send_brand_mail_to_referent($node->uid, $node->nid, $node->title);
//      $node->field_email_sent['und'][0]['value'] = 1;
//    }
//  }
//}

/**
 * Helper functions ------------------------------------------------------------
 */

/**
 * Returns the number of main brands (grandes marques).
 *
 * @return
 *   The number of main brands.
 */
function crealead_main_brands_number() {
  $query = db_select('node', 'n')->fields('n', array('nid'));
  $query->join('field_data_field_brand_type', 'bt', 'n.nid=bt.entity_id');
  $query->condition('n.status', '1');
  $query->condition('bt.field_brand_type_value', '3');
  $result = $query->execute()->fetchCol();

  return count($result);
}

/**
 * Returns the view's markup for the current brand's contacts list if current user is allowed to view it.
 * Otherwise returns an empty string.
 *
 * Users allowed to view current brand's email contacts list are :
 * - superadmin (uid=1)
 * - users with role administrator, webmaster, pole gestion and referent
 * - all coes attached to current brand
 *
 * @return string
 *   The listing brand's contacts markup or an empty string.
 */
function crealead_brand_contacts_list() {
  $node = menu_get_object();
  $allowed_uids = array('1');

  if (!empty($node->field_brand_coes)) {
    $fc_coes = $node->field_brand_coes['und'];
    foreach ($fc_coes as $fc_item_id) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $fc_item_id['value']);
      $fc_item = $wrapper->value();
        $allowed_uids[] = $fc_item->field_brand_coe['und'][0]['target_id'];
    }
  }

  $allowed_roles = array('administrateur', 'webmaster', 'référent', 'pôle gestion');
  global $user;

  $output = '';
  if (in_array($user->uid, $allowed_uids) || sizeof(array_intersect($allowed_roles, $user->roles)) > 0) {
    $output = views_embed_view('brand_contact_submissions', 'brand_contacts');
  }
  return $output;
}


function crealead_send_brand_mail_to_referent($uid, $brand_nid, $brand_title) {
  $user_wrapper = entity_metadata_wrapper('user', $uid);

  // Sends email to referent only if user has a referent.
  if (isset($user_wrapper->field_user_referent)) {
    $referent_uid = $user_wrapper->field_user_referent->raw();
    $referent_wrapper = entity_metadata_wrapper('user', $referent_uid);
    $referent_email = $referent_wrapper->mail->raw();
    $referent_fullname = $referent_wrapper->field_user_firstname->raw() . ' ' . $referent_wrapper->field_user_lastname->raw();

    // Build email message to referent.
    $to = $referent_email;
    $from = variable_get('site_mail');
    $mail_subject = '[Site web Crealead] Demande de validation d\'une marque';
    $mail_body = $user_wrapper->field_user_firstname->raw() . ' ' . $user_wrapper->field_user_lastname->raw()
      . ' a demandé la validation de sa marque ' . $brand_title . ' : http://' . $_SERVER['HTTP_HOST'] . '/node/' . $brand_nid;
    $params = array('subject' => $mail_subject, 'body' => $mail_body);

    $type = 'status';
    if (drupal_mail('crealead_brands', 'brand_validation_request', $to, language_default(), $params, $from)) {
      $message = t('Validation request email message sent successfully to %fullname (%to)', array(
        '%fullname' => $referent_fullname,
        '%to' => $to
      ));
    }
    else {
      $message = t('Email message could not be sent to %fullname (%to)', array(
        '%fullname' => $referent_fullname,
        '%to' => $to
      ));
      $type = 'warning';
    }
    drupal_set_message($message, $type);
  }
}

/**
 * Implements hook_mail().
 */
function crealead_brands_mail($key, &$message, $params) {
  switch ($key) {
    case 'brand_validation_request':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}
/**
 * Implements hook_views_pre_render().
 */
function crealead_brands_views_pre_render(&$view) {

  if ($view->name == 'brands' && $view->current_display == 'brands_list') {

    drupal_add_js(drupal_get_path('theme', 'crealead') . '/js/check_label.js', array(
      'type' => 'file',
      'group' => JS_THEME,
    ));
  }
  if ($view->name == 'field_collection_coes' && $view->current_display == 'brand_coes') {
    drupal_add_js(drupal_get_path('theme', 'crealead') . '/js/match-brand-height.js', array(
      'type' => 'file',
      'group' => JS_THEME,
    ));

    // Handling of coes in "Entrepreneurs" tab.
    foreach ($view->result as $key=>$coe) {
      // If coe profile pid not null
      if (isset($coe->profile_users_pid)) {
        $coe_profile = entity_metadata_wrapper('profile2', $coe->profile_users_pid);
        $profile_is_published = $coe_profile->field_coe_pub_status->value();

        // but it's not published, it must be not clickable in brand's "Entrepreneurs" tab.
        if (!$profile_is_published) {
          // Coe picture made not clickable.
          unset($coe->field_field_coe_photo[0]['rendered']['#path']);
          // Coe name made not clickable.
          $coe->field_field_brand_coe[0]['rendered']['#markup'] = strip_tags($coe->field_field_brand_coe[0]['rendered']['#markup']);
        }
      }
      // And if coe profile pid is null, the best to do is to remove the field collection item from view.
      else {
        unset($view->result[$key]);
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function crealead_brands_views_query_alter(&$view, &$query) {
  if ($view->name == 'brands' && $view->current_display == 'brands_list') {
    // Brands are sorted on title, then randomly (using Views random seed module)
    // if none of the 3 search criteria are used.
    // In that case, brands are sorted on title only (random criterion is removed).
    if ($view->exposed_raw_input['field_business_sector_tid'] != 'All'
      || $view->exposed_raw_input['field_brand_search_value'] != ''
//      || $view->exposed_raw_input['title'] != ''
    ) {
      unset($query->orderby[0]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_brands_form_achievement_node_form_alter(&$form, &$form_state, $form_id) {
  // We must display only sector brands and certif/labels the parent brand(s) of the current achievement is related to.
  // First, we get the parent brands.
  $parent_brands = crealead_achievements_get_parent_brands($form['nid']['#value']);

  // If any parent brands exist, we get the sector brands of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = crealead_brands_get_parent_sector_brands($parent_brands);
    $parent_certifs_labels = crealead_brands_get_parent_certifs_labels($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        crealead_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }

    // If any certif/label exists
    if (!empty($parent_certifs_labels)) {
      // We have to clean the certifications/labels field options array by keeping only the parent ones.
      $form['field_related_certifs_labels']['und']['#options'] =
        crealead_clean_certifs_labels_options($form['field_related_certifs_labels']['und']['#options'], $parent_certifs_labels);
    }
    else {
      $form['field_related_certifs_labels']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands field from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
    $form['field_related_certifs_labels']['#access'] = FALSE;
  }

  // Add form field related_brands
  // Seek brands belonging to current user.
  $query = db_select('node','n')
    ->fields('n', array('nid','title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'brand')
    ->condition('n.uid', $form['uid']);
  $result = $query->execute()->fetchAll();

  $options = array();
  foreach ($result as $item) {
    $options[$item->nid] = $item->title;
  }

  $form['related_brands'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Rattacher la réalisation à l\'une des marques suivantes',
    '#options' => $options,
    '#default_value' => array_keys($parent_brands),
  );
  
  // Add custom submit handler.
  $form['actions']['submit']['#submit'][] = 'crealead_achievement_submit';
}

function crealead_achievements_get_parent_brands($achiev_id) {
  if (!isset($achiev_id)) return array();

  $query = db_select('field_data_field_brand_achievements', 'fba');
  $query->fields('fba', array('entity_id'));
  $query->condition('field_brand_achievements_target_id', $achiev_id);

  return $query->execute()->fetchAllKeyed(0,0);
}

function crealead_brands_get_parent_sector_brands($brands) {
  $parent_sector_brands = array();
  foreach ($brands as $brand_id) {
    $query = db_select('field_data_field_related_sector_brands', 'frsb');
    $query->fields('frsb', array('field_related_sector_brands_tid'));
    $query->condition('entity_id', $brand_id);
    $parent_sector_brands += $query->execute()->fetchAllKeyed(0, 0);
  }
  return $parent_sector_brands;
}

function crealead_brands_get_parent_certifs_labels($brands) {
  $parent_certifs_labels = array();
  foreach ($brands as $brand_id) {
    $query = db_select('field_data_field_certifications_labels', 'fcl');
    $query->fields('fcl', array('field_certifications_labels_tid'));
    $query->condition('entity_id', $brand_id);
    $parent_certifs_labels += $query->execute()->fetchAllKeyed(0, 0);
  }
  return $parent_certifs_labels;
}

function crealead_clean_sector_brands_options($sector_brands_options, $parent_sector_brands) {
  foreach ($sector_brands_options as $key=>$sector_brand) {
    if (!in_array($key, $parent_sector_brands)) {
      unset($sector_brands_options[$key]);
    }
  }
  return $sector_brands_options;
}

function crealead_clean_certifs_labels_options($certifs_labels_options, $parent_certifs_labels) {
  foreach ($certifs_labels_options as $key=>$certif_label) {
    if (!in_array($key, $parent_certifs_labels)) {
      unset($certifs_labels_options[$key]);
    }
  }
  return $certifs_labels_options;
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function crealead_brands_form_client_node_form_alter(&$form, &$form_state, $form_id) {
  // Seek brands belonging to current user.
  $query = db_select('node','n')
    ->fields('n', array('nid','title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'brand')
    ->condition('n.uid', $form['uid']);
  $result = $query->execute()->fetchAll();

  $options = array();
  foreach ($result as $item) {
    $options[$item->nid] = $item->title;
  }

  // Add form field info_text
  $form['info_text'] = array(
    '#markup' => '<p class="info-text">Décrivez le client en utilisant sa propre communication officielle. Ne décrivez pas ce que vous avez réalisé pour lui.</p>',
  );

  // Add form field related_brands (but not when new client is created from brand page via popup).
  if (!isset($_GET['render'])) {
    $form['related_brands'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Rattacher le client à l\'une des marques suivantes',
      '#options' => $options,
    );

    $form['related_brands']['#weight'] = -1;
  }

  // Reorder form fields
  $form['info_text']['#weight'] = -10;
  $form['field_client_logo']['#weight'] = 2;
  $form['field_client_type']['#weight'] = 3;
  $form['body']['#weight'] = 4;
  $form['field_client_location']['#weight'] = 5;

  // Add custom submit handler.
  $form['actions']['submit']['#submit'][] = 'crealead_client_submit';
}

/**
 * Custom submit handler.
 *
 * Add newly created Client as reference client to selected brands.
 *
 * @param $form
 * @param $form_state
 */
function crealead_client_submit($form, $form_state) {
  // Nid of freshly created Client node.
  $new_client_id = $form_state['nid'];

  // Selected brands handling.
  // $form_state['values']['related_brands'] doesn't exist if new client is being created
  // from the brand's page, via popup.
  // Function array_filter() returns values different from zero.
  if (isset($form_state['values']['related_brands'])) {
    $checked_brands_ids = array_filter($form_state['values']['related_brands']);

    // For each selected brand, we link the freshly created Client.
    foreach ($checked_brands_ids as $brand_id) {
      $wrapper = entity_metadata_wrapper('node', $brand_id);
      $clients = $wrapper->field_brand_references->raw();
      array_push($clients, $new_client_id);
      $wrapper->field_brand_references->set($clients);
      $wrapper->save();
    }
  }
}

/**
 * Return both Client name (passed on by GET request during ajax call) and similar registered Client names.
 * Callback function for 'ajax/similar_clients' menu item.
 *
 * @return array Array containing 1) the Client name and 2) a child array containing registered Client names.
 *
 * @see crealead_brands_menu().
 */
function crealead_brands_similar_clients() {
  watchdog('similar_clients', 'dans crealead_brands_similar_clients : ' . $_GET['clientName']);
  $library = libraries_load('string_similarity');

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'client');
  $similar_client_names = $query->execute()->fetchAllKeyed(0, 1);

  return array('new_client_name' => $_GET['clientName'], 'similar_client_names' => $similar_client_names);
}

/**
 * Return an HTML unordered list of sufficiently similar Client clickable names.
 * Delivery callback function for 'ajax/similar_clients' menu item.
 * @param array $comparison_data
 */
function crealead_brands_similar_clients_list(array $comparison_data) {

  $similar_client_names = $comparison_data['similar_client_names'];
  $new_client_name = $comparison_data['new_client_name'];
  watchdog('similar_clients', 'dans crealead_brands_similar_clients_list : nombre de clients = ' . count($similar_client_names));

  $similar_clients_list = '';
  foreach ($similar_client_names as $client_id => $client_name) {
    $comparison = new LetterPairSimilarity;
    $value = $comparison->compareStrings($client_name, $new_client_name);
    if ($value >= 0.25) {
      $similar_clients_list .= '<li>'
        . '<a class="registered-client" name="' . $client_id .'">'
        . $client_name
        . '</a>'
//        . ' ('
//        . number_format(round($value, 2), 2)
//        .')'
        . '</li>';
    }
  }

  if ($similar_clients_list == '') {
    print '<p class="no-result">Pas de client avec un nom identique ou proche.<br />Vous pouvez continuer à saisir ce nouveau client.</p>';
  }
  else {
    print '<p class="question">S\'agit-il d\'un de ces clients ?</p>' .
    '<ul>' . $similar_clients_list . '</ul>';
  }
}

/**
 * Links an already registered Client to the selected brand.
 * Callback function for 'crealead_brands_link_registered_client' menu item
 *
 * @see crealead_brands_menu().
 */
function crealead_brands_link_registered_client() {
  $brand_nid = arg(1);
  $client_nid = arg(2);

  $brand_wrapper = entity_metadata_wrapper('node', $brand_nid);
  $brand_name = $brand_wrapper->title->value();
  $clients = $brand_wrapper->field_brand_references->raw();
  array_push($clients, $client_nid);
  $brand_wrapper->field_brand_references->set($clients);
  $brand_wrapper->save();

  $client_wrapper = entity_metadata_wrapper('node', $client_nid);
  $client_name = $client_wrapper->title->value();

  drupal_set_message(
    t('Le client <b>@client_name</b> a bien été ajouté à la marque <b>@brand_name</b>',
    array('@client_name' => $client_name, '@brand_name' => $brand_name)
  ));

  drupal_goto('/node/' . $brand_nid);
}

function crealead_achievement_submit($form, $form_state) {
  // Nid of freshly created Achievement node.
  $new_achiev_id = $form_state['nid'];

  // Selected brands handling.
  // $form_state['values']['related_brands'] doesn't exist if new client is being created
  // from the brand's page, via popup.
  // Function array_filter() returns values different from zero.
  if (isset($form_state['values']['related_brands'])) {
    $checked_brands_ids = array_filter($form_state['values']['related_brands']);

    // For each selected brand, we link the freshly created Client.
    foreach ($checked_brands_ids as $brand_id) {
      $wrapper = entity_metadata_wrapper('node', $brand_id);
      $clients = $wrapper->field_brand_achievements->raw();
      array_push($clients, $new_achiev_id);
      $wrapper->field_brand_achievements->set($clients);
      $wrapper->save();
    }
  }
}
