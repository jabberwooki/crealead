<?php
/**
 * @file
 * Code for the Core feature.
 */

include_once 'kcore.features.inc';

/**
 * Implements hook_init().
 */
function kcore_init() {
  drupal_add_js(drupal_get_path('module','kcore') . '/js/kcore.js');
  drupal_add_css(drupal_get_path('module','kcore') . '/css/eu_cookies.css', array('group' => CSS_THEME));
  drupal_add_js(array('creaeleadCoeArea' => array('userLoggedIn' => user_is_logged_in())), 'setting');
  drupal_add_js(drupal_get_path('theme', 'crealead') . '/js/crealead_intra_manage_titles.js', array(
    'type' => 'file',
    'group' => JS_THEME,
  ));

  if (request_path() == 'espace-co-entrepreneur/dup') {
    drupal_add_js(drupal_get_path('module','kcore') . '/js/cse.js');
  }
}

/**
 * Implements hook_preprocess_html().
 */
function kcore_preprocess_html(&$variables) {
  global $theme;

  if($theme == 'adminimal') {
    // reference my own stylesheet
      drupal_add_css(drupal_get_path('module', 'kcore') . '/css/admin.css', array('weight' => CSS_THEME));
  }
}

/**
 * Implements hook_menu().
 */
function kcore_menu() {
  $items = array();

  $items['admin/config/crealead'] = array(
    'title' => 'Crealead',
    'description' => 'Paramétrage des fonctionnalités Crealead.',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer crealead settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/crealead/key_figures'] = array(
    'title' => 'Chiffres clés',
    'description' => 'Réglage des chiffres clés Crealead.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crealead_settings_form'),
    'access arguments' => array('administer crealead settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'kcore.admin.inc',
  );

    $items['crealead-profiles/%/delete'] = array(
        'type' => MENU_CALLBACK,
        'title' => 'Delete',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('kcore_profile2_delete_confirm', 1),
        'access callback' => TRUE,
        'file' => 'kcore.pages.inc',
    );

  return $items;
}

function kcore_ma_page() {
    $content = "Ma super page !";
    return $content;
}

/**
 * Implements hook_permission().
 */
function kcore_permission() {
  return array(
    'administer crealead settings' => array(
      'title' => t('Administer Crealead settings'),
      'description' => t('Administer various settings for Crealead site.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 * Thanks to pfournier, creator of module Empty Front Page (https://www.drupal.org/project/empty_front_page)
 */
function kcore_menu_alter(&$items) {
  // Génère une page d'accueil vide.
  $items['node']['page callback'] = 'empty_front_page_callback';

  // Empêche les non admin d'accéder à la page Admin > Configuration > Rédaction de contenu > Link
  $items['admin/config/content/link']['access callback'] = 'kcore_link_settings_access';
}

function empty_front_page_callback() {
	drupal_set_title('');
	return array();
}

function kcore_link_settings_access() {
  global $user;
  if ($user->uid != 1 && !in_array('administrateur', $user->roles)) {
    return false;
  }

  return true;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kcore_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Shows Referent select field to following roles only : administrateur, webmaster, referent.
  global $user;

  // Accès au champ référent
    $allowed_roles = array('administrateur','webmaster','référent');
    $user_allowed_roles = array_intersect($allowed_roles, $user->roles);
    if ($user->uid != 1 && empty($user_allowed_roles)) {
    $form['field_user_referent']['#access'] = FALSE;
    }

    // Accès au champ Responsable de pole.
    $allowed_roles = array('administrateur');
    $user_allowed_roles = array_intersect($allowed_roles, $user->roles);
    if ($user->uid != 1 && empty($user_allowed_roles)) {
        $form['field_pole_manager']['#access'] = FALSE;
    }

    // Handling of the 'Delete Profile' button.
    // Is current user already has the displayed profile, the button shows up.
    // Only Structure and Instances profiles are concerned.
    $structure_profile_types = array('assistant_page','direction_page','management_page','provider_page','referent_page');
    $instances_profile_types = array('ca_page','dup_page');
    $all_handled_types = array_merge($structure_profile_types, $instances_profile_types);

    if (in_array($form['#user_category'],$all_handled_types)) {
        $profiles = profile2_load_by_user($form['#user']);

        if (array_key_exists($form['#user_category'], $profiles) && user_access('administer profiles')) {
            $current_profile = $profiles[$form['#user_category']];
            $form_state['kcore_pid'] = $current_profile->pid;

            $form['actions']['delete'] = array(
              '#type' => 'submit',
              '#value' => t('Delete profile'),
              '#weight' => 45,
              '#limit_validation_errors' => array(),
              '#submit' => array('kcore_profile2_form_submit_delete')
            );
        }
    }
}

function kcore_profile2_form_submit_delete($form, &$form_state) {
    $form_state['redirect'] = 'crealead-profiles/' . $form_state['kcore_pid'] . '/delete';
}

/**
 * Implements hook_email_registration_name().
 */
function kcore_email_registration_name($edit, $account) {
  return $edit['field_user_firstname']['und'][0]['value'] . ' ' . $edit['field_user_lastname']['und'][0]['value'];
}

/**
 * Implements hook_block_info().
 */
function kcore_block_info() {
  $blocks = array();
  $blocks['crealead_coes_number'] = array(
    'info' => t('Crealead : Nombre d\'entrepreneurs'),
  );
  $blocks['crealead_refs_number'] = array(
    'info' => t('Crealead : Nombre de référents'),
  );
  $blocks['crealead_speakers_number'] = array(
    'info' => t('Crealead : Nombre d\'intervenants'),
  );
  $blocks['crealead_meetings_number'] = array(
    'info' => t('Crealead : Nombre de rencontres'),
  );
  $blocks['crealead_sponsors'] = array(
    'info' => t('Crealead : Sponsors'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function kcore_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'crealead_coes_number' :
      $coes_number_display = variable_get('coes_number', 1);

      if ($coes_number_display == 1) {
        $number = crealead_users_number('entrepreneur');
      }
      else {
        $number = variable_get('coes_number_value', '100');
      }

      $content = '<div id="coes-number" class="number coes-number">' . $number . '</div>';
      $content .= '<div id="coes-text" class="text coes-text">Co-entrepreneurs <br><span class="under-key-data">et autant de compétences complémentaires</span></div>';
      $block['content'] = $content;
      break;

    case 'crealead_refs_number' :
      $refs_number_display = variable_get('refs_number', 1);

      if ($refs_number_display == 1) {
        $number = crealead_users_number('referent');
      }
      else {
        $number = variable_get('refs_number_value', '100');
      }

      $content = '<div id="refs-number" class="number refs-number">' . $number . '</div>';
      $content .= '<div id="refs-text" class="text refs-text">Membres<br><span class="under-key-data">d’une équipe support pour
accompagner et gérer</span></div>';
      $block['content'] = $content;
      break;

    case 'crealead_speakers_number' :
      $number = variable_get('speakers_number_value', '10');

      $content = '<div id="speakers-number" class="number speakers-number">' . $number . '</div>';
      $content .= '<div id="speakers-text" class="text speakers-text">Intervenants<br><span class="under-key-data">en formations, animations et
prestations.</span></div>';
      $block['content'] = $content;
      break;

    case 'crealead_meetings_number' :
      $number = variable_get('meetings_number_value', '10');

      $content = '<div id="meetings-number" class="number meetings-number">' . $number . '</div>';
      $content .= '<div id="meetings-text" class="text meetings-text">Rencontres par an <br><span  class="under-key-data">organisées pour échanger et
travailler ensemble.</span></div>';
      $block['content'] = $content;
      break;

    case 'crealead_sponsors' :
      $block['subject'] = '';

      $sponsors = array(
        'fond-social-europeen' => array(
          'url' => '',
          //'logo-file' => 'fds-social-europeen_506x130.png',
          'logo-file' => 'fds-social-europeen_506x105_transparent.png',
          'image-title' => ''
        ),
        'caisse-epargne' => array(
          'url' => 'https://www.caisse-epargne.fr/languedoc-roussillon/banque-assurance-banque-a-distance.aspx',
          'logo-file' => 'ca-lr_263x57.png',
          'image-title' => ''
        ),
        'prefecture' => array(
          'url' => '',
          'logo-file' => 'prefecture_78x100.jpg',
          'image-title' => ''
        ),
        'montpellier-metropole' => array(
          'url' => 'http://www.montpellier3m.fr/',
          'logo-file' => 'montpellier-metropole_100x100.png',
          'image-title' => ''
        ),
        'cd34' => array(
          'url' => 'http://www.herault.fr/',
          'logo-file' => 'CD34_134x63.png',
          'image-title' => ''
        ),
        'qualiopi' => array(
          'url' => '',
          'logo-file' => 'qualiopi_641x250.png',
          'image-title' =>
          '
          La certification qualité a été délivrée au titre des catégories d\'action suivantes
          ACTIONS DE FORMATION
          BILANS DE COMPÉTENCES
          VALIDATION DES ACQUIS DE L\' EXPÉRIENCE'
        ),
      );

      $path = drupal_get_path('module', 'kcore') . '/sponsors-logos/';
      $content = '<div id="crealead-sponsor">';
      foreach ($sponsors as $name=>$sponsor) {
        $content .= '<span id="' . $name . '">';
        $img = theme('image', array(
          'path' => $path . $sponsor['logo-file'],
          'title' => $sponsor['image-title'],
        ));
        if ($sponsor['url'] != '') {
          $logo = l($img,$sponsor['url'], array('html' => TRUE));
        }
        else {
          $logo = $img;
        }
        $content .= $logo;
        $content .= '</span>';
      }
      $content .= '</div>';
      $block['content'] = $content;
      break;
  }

  return $block;
}

/**
 * Helper functions.
 */

/**
 * Returns the number of active user belonging to role given as paramater.
 * Il no role is passed on, returns the total number of active users.
 *
 * @param $role
 *   A role machine name (ex. Référent role's machine name is 'referent').
 *
 * @return
 *   The number of users.
 */
function crealead_users_number($role=null) {
  $query = db_select('users_roles', 'ur')->fields('ur', array('uid'));
  if (isset($role)) {
    $role = user_role_load_by_name($role);
    $query->condition('ur.rid', $role->rid);
  }
  else {
    $query->distinct();
  }
  $result = $query->execute()->fetchCol();

  return count($result);
}

function kcore_admin_menu_output_alter(&$content) {
  if (isset($content['menu']['admin/index'])) {
    unset($content['menu']['admin/index']);
  }
}

/**
 * Implements hook_node_access().
 */
function kcore_node_access($node, $op, $account) {
  if (isset($node->type) && $node->type == 'webform' && !user_is_logged_in()) {
    return NODE_ACCESS_DENY;
  }

  $current_user_roles = $account->roles;

  unset($current_user_roles[array_search('debug', $current_user_roles)]);
  unset($current_user_roles[array_search('authenticated user', $current_user_roles)]);

  // Paramétrage de ce qu'un associé externe ne doit pas voir comme contenu.
  if (count($current_user_roles) == 1 && current($current_user_roles) == 'associé') {

    // Types de contenu non autorisés aux associés externes
    $forbidden_content_types = [
      'business_group',
      'gazette',
      'link_to_doc',
      'need',
      'offer',
      'room_event',
      'structure_event',
      'newsflash',
      'webform',
    ];

    if (isset($node->type) && in_array($node->type, $forbidden_content_types)) {
      return NODE_ACCESS_DENY;
    }

    // Un associé externe ne peut voir que les lettres d'info du CA (Gouvernance).
    if (isset($node->type) && $node->type == 'newsletter' && $node->field_newsletter_type['und'][0]['value'] == 'st') {
      return NODE_ACCESS_DENY;
    }
  }

  // A décommenter et completer s'il faut vraiment interdire à l'utilisateur
  // de modifier un node actu ou réalisation via /node/nid/edit.
//  if (isset($node->type)) {
//      if (in_array($node->type, array('news', 'achievement'))) {
//          if ($op == 'update') {
//              $full_user = user_load($account);
//              watchdog('kcore', "user = $account->uid");
//              watchdog('kcore', "auteur = $node->uid");
//              if ($node->uid != $account->uid) {
//
//              }
//              return NODE_ACCESS_DENY;
//          }
//      }
//  }
}

/**
 * Implements hook_block_view_alter().
 */
function kcore_block_view_alter(&$data, $block) {
  if ($block->delta == 'menu-coe-area' && !user_is_logged_in()) {
    $data['content'] = array();
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function kcore_form_views_exposed_form_coe_directory_page_alter(&$form, &$form_state, $form_id) {
  dpm('trombi');

}

function kcore_user_cancel_methods_alter(&$methods) {
  $custom_method = array(
    'user_cancel_block_custom_unpublish' => array(
      'title' => 'Désactiver le compte et dépublier son contenu de manière différenciée (option propre au site web Crealead)',
      'description' => 'Le compte est bloqué. Certains contenus restent publiés, d\'autres sont dépubliés, d\'autres encore sont dépubliés de manière conditionnelle.',
    )
  );

  $methods = $custom_method + $methods;
}

/**
 * Implements hook_user_cancel().
 *
 * @param $edit
 * @param $account
 * @param $method
 * @throws \EntityMetadataWrapperException
 */
function kcore_user_cancel($edit, $account, $method) {
    switch ($method) {
        case 'user_cancel_block_custom_unpublish':
            module_load_include('inc', 'node', 'node.admin');

            // - Dépublication des alertes, demandes, événements et offres sans rien faire d'autre
            //
            // - Déplublication des marques, formations, sessions de formation et produit en prévenant par mail les personnes concernées.
            //
            // - Tous les autres types de contenu restent publiés :
            //   actus, articles, brèves, clients, collectifs, comptes-rendus, diapos, dossiers filedepot, flash infos, liens vers documents,
            //   réalisations, événements salle, événements structure, faqs, gazettes, pages de base et réunions d'info.

            $direct_unpublish_types = array(
                'warning',
                'need',
                'event',
                'offer'
            );
            $conditionnal_unpublish_types = array(
                'brand',
                'training',
                'training_session',
                'product'
            );

            $all_unpublish_types = array_merge($direct_unpublish_types, $conditionnal_unpublish_types);

            // Récupération de tous les nodes dont le compte drupal en cours de désactivation est l'auteur.
            $nodes = db_select('node', 'n')
                ->fields('n', array('nid', 'type', 'title'))
                ->condition('uid', $account->uid)
                ->condition('type', $all_unpublish_types, 'IN')
                ->execute()
                //->fetchCol();
                ->fetchAll();
            //dpm($nodes);

            // Tableau pour stocker les emails des personnes à avertir
            $email_data = array(
                'brands' => array(),
                'trainings' => array(),
                'products' => array(),
            );
            // Tableau pour stocker les nid des nodes seuls (voir Dépublication des nodes un peu plus bas dans ce traitement).
            $node_nids = array();

            // Récupération des données (email des coes, nom des marques, intitulés des formations et des produits) à envoyer par email.
            foreach ($nodes as $node) {
                if ($node->type == 'brand') {
                    $brand = entity_metadata_wrapper('node', $node->nid);
                    $brand_name = $brand->title->value();
                    // S'il y a plus d'un coe (le propriétaire de la marque),
                    if (sizeof($brand_coes = $brand->field_brand_coes->value()) > 1) {
                        foreach ($brand_coes as $fci) { // fci = field_collection_item
                            // il faut récupérer l'email des autres coes.
                            if (($coe_id = $fci->field_brand_coe['und'][0]['target_id']) != $account->uid) {
                                $coe = user_load($coe_id);
                                $email_data['brands'][$brand_name][$coe_id] = $coe->mail;
                            }
                        }
                    }
                }
                elseif (($node->type == 'training') || ($node->type == 'product')) {
                    // Il faut récupérer le nid des marques qui ont affiché cette formation ou ce produit partagée.
                    // Cette info est disponible dans la table crealead_shared_content.
                    $brands_displaying_this_shared_content = db_select('crealead_shared_content', 'csc')
                        ->fields('csc', array('brand_id'))
                        ->condition('type', array('training', 'product'), 'IN')
                        ->condition('nid', $node->nid)
                        ->condition('status', 1)
                        ->execute()
                        ->fetchCol();
                    // Puis il faut récupérer les emails des coes de ces marques
                    foreach ($brands_displaying_this_shared_content as $brand_id) {
                        $brand = entity_metadata_wrapper('node', $brand_id);
                        $brand_name = $brand->title->value();
                        $brand_coes = $brand->field_brand_coes->value();
                        foreach ($brand_coes as $fci) { // fci = field_collection_item
                            if (($coe_id = $fci->field_brand_coe['und'][0]['target_id']) != $account->uid) {
                                $coe = user_load($coe_id);
                                $email_data[$node->type . 's'][$node->title][$brand_name][$coe_id] = $coe->mail;
                            }
                        }
                    }

                }
                // A la fin, on en profite pour stocker les nid.
                $node_nids[] = $node->nid;
            }
            //dpm($email_data);

            // Dépublication des nodes
            // Attention, il faut passer en paramètre un tableau de nid seulement, donc $node_nids (voir au dessus).
            node_mass_update($node_nids, array('status' => 0));

            // Enregistrement de la date de blocage du compte Drupal de l'utilisateur courant
            // dans le champ "Date de départ de Crealead" de son profil coe, s'il en possède un.
            if ($profile = profile2_load_by_user($account, 'coe_page')) {
                dpm($profile->pid, 'pid : ');
                dpm($profile->uid, 'uid : ');
                $wrapper = entity_metadata_wrapper('profile2', $profile);
                $current_time = time();
                dpm(date('d/m/y'), $current_time);
                $wrapper->field_leaving_date->set(time());
                $wrapper->save();
            }

            // Envoi des mails
            foreach ($email_data['brands'] as $brand_name => $coe_addresses) {
                foreach ($coe_addresses as $address) {
                    kcore_send_content_unpublication_infos($account, $brand_name, $address, 'brand');
                }
            }

            foreach ($email_data['trainings'] as $training_title => $concerned_brands) {
                foreach ($concerned_brands as $brand_name => $coe_addresses) {
                    foreach ($coe_addresses as $address) {
                        kcore_send_content_unpublication_infos($account, $brand_name, $address, 'training', $training_title);
                    }
                }
            }

            foreach ($email_data['products'] as $product_title => $concerned_brands) {
                foreach ($concerned_brands as $brand_name => $coe_addresses) {
                    foreach ($coe_addresses as $address) {
                        kcore_send_content_unpublication_infos($account, $brand_name, $address, 'product', $product_title);
                    }
                }
            }

            break;
    }
}

/**
 * Send an email to a person concerned by an unpublication type.
 *
 * @param $email_address string Email address of the concerned person.
 * @param $info_type string Unpublication type (brand, training or product).
 */
function kcore_send_content_unpublication_infos($account, $brand_name, $email_address, $info_type, $content_title=null) {

    $to = $email_address;
    $from = "Crealead <contact@crealead.com>";
    $reply_to = "contact@crealead.com";

    $mail_subject = 'Départ de' . $account->name . ' de Crealead - Dépublication de ';

    $mail_body = '<div id="crealead-email-body">' .
        '<br/>' .
        '<p>Bonjour,</p>';

    switch ($info_type) {
        case 'brand':
            dpm('(' . $email_address . ') Suite au départ de ' . $account->name . ', la marque ' . $brand_name . ' a été dépubliée. Si vous souhaitez...');
            $mail_subject .= 'marque.';
            $mail_body .= '<p>Suite au départ de ' . $account->name . ', la marque <b>' . $brand_name . '</b> a été dépubliée.<br/>'
                . 'Si vous souhaitez continuer à l\'afficher sur le site, contactez votre référent.</p>';
            break;

        case 'training':
            dpm('(' . $email_address . ') Suite au départ de ' . $account->name . ', la formation partagée ' . $content_title . ' a été désactivée. Elle n\'est donc plus visible en tant que formation conseillée dans l\'onglet Solutions de la marque ' . $brand_name);
            $mail_subject .= 'formation.';
            $mail_body .='<p>Suite au départ de ' . $account->name . ', la formation partagée <b>' . $content_title . '</b> a été desactivée.<br/>'
            . ' Elle n\'est donc plus visible en tant que formation conseillée dans l\'onglet Solutions de la marque <b>' . $brand_name . '</b></p>';
            break;

        case 'product':
            dpm('(' . $email_address . ') Suite au départ de ' . $account->name . ', le produit partagé ' . $content_title . ' a été désactivé. Il n\'est donc plus visible en tant que produit conseillé dans l\'onglet Solutions de la marque ' . $brand_name);
            $mail_subject .= 'produit.';
            $mail_body .='<p>Suite au départ de ' . $account->name . ', le produit partagé <b>' . $content_title . '</b> a été desactivé.<br/>'
                . ' Il n\'est donc plus visible en tant que produit conseillé dans l\'onglet Solutions de la marque <b>' . $brand_name . '</b></p>';
            break;

    }

    $mail_body .= '</div>';

    $footer_image_fullpath = 'https://www.crealead.com/profiles/crealead/modules/features/kcore/images/bandeau-crealead.jpg';
    $mail_body .=
        '<br/><br/>' .
        '<p class="crealead-email-footer">' .
        '<img src="' . $footer_image_fullpath . '">' .
        '</p>';

    $params = array(
        'headers' => array(
            'Reply-To' => $reply_to,
        ),
        'subject' => $mail_subject,
        'body' => $mail_body,
    );

    if (drupal_mail('kcore', 'unpublished_content_email', $to, language_default(), $params, $from)) {
        $message = t("Unpublished content email sent to %recipient_email.", array('%recipient_email' => $to));
        watchdog('crealead_content_unpublication', $message);
    }
    else {
        $message = t("Unpublished content email sending failed (destinataire: %recipient_email.", array('%recipient_email' => $to));
        watchdog('crealead_content_unpublication', $message);
    }
}

/**
 * Implements hook_mail().
 */
function kcore_mail($key, &$message, $params) {
    switch ($key) {
        case 'unpublished_content_email':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
    }
}

function kcore_user_roles() {
    $query = db_select('role', 'r');
    $query->fields('r', array('rid', 'name', 'machine_name'));
    $result = $query->execute();

    $roles = array();
    foreach ($result as $role) {
        $roles[$role->machine_name] = $role->name;
    }

    return $roles;
}

function kcore_get_profile2_role_name($profile_type) {
    $profiles_roles = array(
        'assistant_page' => 'assistant',
        'direction_page' => 'direction',
        'provider_page' => 'provider',
        'management_page' => 'pole_gestion',
        'referent_page' => 'referent',
        'ca_page' => 'ca',
        'dup_page' => 'dup',
    );

    $all_roles = kcore_user_roles();

    return $all_roles[$profiles_roles[$profile_type]];
}


/**
 * Les deux fonctions ci-dessous permettent de cloner un affichage de vue de type page
 * en affichage de type bloc.
 *
 * Trouvé dans ce ticket du projet Views :
 * https://www.drupal.org/project/views/issues/1208282
 * Merci à ufku.
 */

/**
 * Implements hook_views_ui_display_tab_alter().
 */
function kcore_views_ui_display_tab_alter(&$build, $view, $display_id) {
    // Add Clone as buttons for all display types
    if (isset($build['details']['top']['actions']['duplicate'])) {
        $copy = $build['details']['top']['actions']['duplicate'];
        $copy['#submit'][0] = 'kcore_views_ui_clone_as_submit';
        foreach (views_fetch_plugin_names('display', NULL, array($view->base_table)) as $type => $label) {
            $build['details']['top']['actions']["clone_as_$type"] = array(
                    '#value' => "Clone as $label",
                    '#display_type' => $type,
                ) + $copy;
        }
    }
}

/**
 * Submit handler for views "clone as" button.
 */
function kcore_views_ui_clone_as_submit($form, &$form_state) {
    $view = $form_state['view'];
    $current_display = $view->display[$form_state['display_id']];
    $display_type = $form_state['clicked_button']['#display_type'];
    $display_id = $view->add_display($display_type);
    $display = $view->display[$display_id];
    $display->display_options = $current_display->display_options;
    $view->current_display = $display_id;
    views_ui_cache_set($view);
    $form_state['redirect'] = 'admin/structure/views/view/' . $view->name . '/edit/' . $display_id;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function kcore_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    // Gestion des onglets VOIR | MODIFIER | GERER L'AFFICHAGE lorsqu'on est sur une page Pole d'activité.
    // Si l'utilisateur a le role "Responsable de pole" et qu'il est rattaché au pole affiché,
    // on lui laisse la barre d'onglet pour qu'il puisse modifier le pole
    // sinon on vide la barre (= array()) pour ne plus rien afficher.
    if ($root_path == 'taxonomy/term/%' && $router_item['map'][2]->vocabulary_machine_name == 'sector_brands') {
        global $user;
        $full_user = user_load($user->uid);

//        if (user_is_logged_in()
//            && !in_array('administrateur', $full_user->roles)
//            && isset($full_user->field_pole_manager['und'][0]['tid'])
//            && $full_user->field_pole_manager['und'][0]['tid'] != $router_item['map'][2]->tid) {
//            $data = array();
//        }
        // Code ci-dessus modifié suite au changement de cardinalité du champ User field_pole_manager (S14-2).
        // Un utilisateur peut-être responsable de plusieurs pôles.
        if (user_is_logged_in() && !in_array('administrateur', $full_user->roles)
            && isset($full_user->field_pole_manager['und'][0]['tid'])) {

            $cleaned_user_pole_ids = array_map(function ($item) { return $item['tid']; }, $full_user->field_pole_manager['und']);
            if (!in_array($router_item['map'][2]->tid, $cleaned_user_pole_ids)) {
                $data = array();
            }
        }
    }
    elseif ($root_path == 'node/%') {
        /////// Gestion de la modif des actus et des réalisations par un responsable de Pole ///////
        // Si l'utilisateur a le role "Responsable de Pole", il peut modifier
        // toutes les actualités et toutes les réalisations grace au réglage des permissions de ce role.
        // Mais en fait, il ne faut lui laisser ce droit que pour les nodes
        // qui ont été rattachées à son pole par l'auteur de l'actualité ou de la réalisation

        if (user_is_logged_in()) {
            if (in_array($router_item['page_arguments'][0]->type, array('news','achievement'))) {
                global $user;

                // On n'agit que si le user connecté n'est pas l'auteur du node affiché.
                if ($router_item['page_arguments'][0]->uid != $user->uid) {
                    $full_user = user_load($user->uid);

                    // Si le user connecté n'est pas admin et s'il est gestionnaire d'au moins un pôle
                    if (!in_array('administrateur', $full_user->roles) && isset($full_user->field_pole_manager['und'][0]['tid'])) {
                        $cleaned_user_pole_ids = array_map(function ($item) { return $item['tid']; }, $full_user->field_pole_manager['und']);
                        $can_user_edit_node = false;

                        // Soit le node actu ou réalisation affiché à été précédemment rattaché à un pole (field_related_sector_brand)
                        // et il faut vérifier que le user connecté est bien gestionnaire de ce pole,
                        if (!empty($router_item['page_arguments'][0]->field_related_sector_brands)) {
//                            $related_sector_brands = $router_item['page_arguments'][0]->field_related_sector_brands['und'];
//                            foreach ($related_sector_brands as $sector_brand) {
//                                if ($sector_brand['tid'] == $full_user->field_pole_manager['und'][0]['tid']) {
//                                    $can_user_edit_node = true;
//                                    break;
//                                }
//                            }
                            // Code ci-dessus modifié suite au changement de cardinalité du champ User field_pole_manager (S14-2).
                            // Un utilisateur peut-être responsable de plusieurs pôles.
                            $cleaned_node_related_poles_ids = array_map(
                                function ($item) { return $item['tid']; },
                                $router_item['page_arguments'][0]->field_related_sector_brands['und']
                            );

                            if (!empty(array_intersect($cleaned_user_pole_ids, $cleaned_node_related_poles_ids))) {
                                $can_user_edit_node = true;
                            }
                        }
                        // soit ce node a été créé par un gestionnaire de pole sans avoir été rattaché à ce pole,
                        // mais seulement affiché dans ce pole (field_related_pole = Actualité/Réalisation visible à la une )
                        // et là aussi il faut vérifier que le user connecté est bien gestionnaire de ce pole
                        elseif (!empty($router_item['page_arguments'][0]->field_related_pole)) {
//                            if ($router_item['page_arguments'][0]->field_related_pole['und'][0]['tid'] == $full_user->field_pole_manager['und'][0]['tid']) {
//                                $can_user_edit_node = true;
//                            }
                            // Code ci-dessus modifié suite au changement de cardinalité du champ User field_pole_manager (S14-2).
                            // Un utilisateur peut-être responsable de plusieurs pôles.
                            $cleaned_node_displayed_poles_ids = array_map(
                                function ($item) { return $item['tid']; },
                                $router_item['page_arguments'][0]->field_related_pole['und']
                            );

                            if (!empty(array_intersect($cleaned_user_pole_ids, $cleaned_node_displayed_poles_ids))) {
                                $can_user_edit_node = true;
                            }
                        }

                        if (!$can_user_edit_node) {
                            $data = array();
                        }
                    }
                }
            }
        }
    }
}

