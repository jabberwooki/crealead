<?php
/**
 * @file
 * Code for the Articles feature.
 */

include_once 'crealead_articles.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_articles_form_article_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module','crealead_articles') . '/css/crealead_articles.css');

  // If user is not allowed, field_news_kind and field_related_themes removed.
  global $user;
  $current_user_roles = $user->roles;
  $crealead_news_allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($crealead_news_allowed_roles, $current_user_roles);
  if (empty($current_user_allowed_roles) & $user->uid != 1) {
    $form['field_article_kind']['#access'] = FALSE;
    //$form['field_landing_pages']['#access'] = FALSE;
  }

  // Hugly hack to remove no longer wanted field_article_kind options
  // (Cannot be deleted because already used).
  unset($form['field_article_kind']['und']['#options'][2]);
  unset($form['field_article_kind']['und']['#options'][3]);

  // Related brands list handling ----------------------------------------------
  // The article create/edit form always contains a user id.
  // If article is being created, user id is the current user id.
  // If article is being modified, user id is the news author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $news_brands = $query->execute()->fetchAllKeyed(2, 2);
  
  $brand_options = $form['field_article_related_brands']['und']['#options'];
  $allowed_brands_options = array();
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $news_brands)) {
      $allowed_brands_options[$key] = $brand;
      unset($brand_options[$key]);
    }
  }
  $form['field_article_related_brands']['und']['#options'] = $brand_options;
  $form['field_allowed_brands']['und']['#options'] = $allowed_brands_options;
//  $form['field_allowed_brands']['und']['#prefix'] = '<div lclass="allowed-brands">';
//  $form['field_allowed_brands']['und']['#suffix'] = '</div>';

  // Then, if news is being modified and current user is not news author,
  // we must display a disabled brand list, unless current used is allowed to.
  if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
    $form['field_article_related_brands']['#disabled'] = TRUE;
  }

  // If article is being created from a brand page,
  // we must catch the brand nid from url
  // and check the corresponding brand in field_related_brands field.
  if (!isset($form['nid']['#value']) && NULL != arg(3)) {
    $form['field_article_related_brands']['und']['#default_value'] = array(arg(3));
  }
  // End of Related brands list handling ---------------------------------------

  // We must display only sector brands and certifs/labels the parent brand(s) of the current article is (are) related to.
  // First, we get the parent brands.
  $parent_brands = crealead_articles_get_parent_brands($form['nid']['#value']);

  // If any parent brands exist, we get the sector brands and certifs/labels of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = crealead_brands_get_parent_sector_brands($parent_brands);
    $parent_certifs_labels = crealead_brands_get_parent_certifs_labels($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        crealead_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }

    // If any certif/label exists
    if (!empty($parent_certifs_labels)) {
      // We have to clean the certifications/labels field options array by keeping only the parent ones.
      $form['field_related_certifs_labels']['und']['#options'] =
        crealead_clean_certifs_labels_options($form['field_related_certifs_labels']['und']['#options'], $parent_certifs_labels);
    }
    else {
      $form['field_related_certifs_labels']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands and certifs/label fields from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
    $form['field_related_certifs_labels']['#access'] = FALSE;
  }

  // Summary is now in plain text. We must remove html tags for nodes saved prior to this modification.
//  $form['body']['und'][0]['summary']['#default_value'] = strip_tags($form['body']['und'][0]['summary']['#default_value']);
}

function crealead_articles_get_parent_brands($article_id) {
  if (!isset($article_id)) return array();

  $query = db_select('field_data_field_article_related_brands', 'farb');
  $query->fields('farb', array('field_article_related_brands_target_id'));
  $query->condition('entity_id', $article_id);

  return $query->execute()->fetchAllKeyed(0,0);
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_articles_views_pre_render(&$view) {
  if ($view->name == 'articles' && $view->current_display == 'brand_articles') {
    // Link 'Ajouter un article' must be added to block only for coes attached to the current brand.
    global $user;
    $current_brand = menu_get_object();
    $wrapper = entity_metadata_wrapper('node', $current_brand);
    $brand_coes = $wrapper->field_brand_coes->value();

    foreach ($brand_coes as $brand_coe) {
      if ($user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter un article',
          '/node/add/article/' . $current_brand->nid,
          array('query' => array('destination' => current_path()))
        );
        break;
      }
    }
  }
  else if ($view->name == 'articles' && $view->current_display == 'page_temoignages') {
    drupal_add_js(drupal_get_path('theme', 'crealead') . '/js/match-testimony-height.js', array(
      'type' => 'file',
      'group' => JS_THEME,
    ));
  }
  else if($view->name == 'articles' && $view->current_display == 'allowed_articles') {
    // If referer is the ajax call, brand_nid can be found as argument 4, otherwise
    if(arg(4)) {
      $query = db_select('node', 'n')->fields('n', array('title'));
      $query->condition('n.nid', arg(4));
      $brand_name = $query->execute()->fetchField();
    }
    else {
      $brand_name = $view->current_entity->title;
    }

    $view->build_info['title'] = str_replace('brand_name', $brand_name, $view->build_info['title']);
  }
}

/**
 * Implements hook_node_view().
 *
 * News node summary is now plain text.
 * We must removed html tags for node summaries saved prior to this modification.
 */
function crealead_articles_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'article' && $view_mode != 'full') {
    if (isset($node->content['body']['#items'][0]['summary'])) {
      $node->content['body'][0]['#markup'] = strip_tags($node->content['body'][0]['#markup']);
    }
  }
}

/**
 * Implements hook_node_postsave().
 */
function crealead_articles_node_postsave($node, $op) {
  if ($node->type == 'article' || $node->type == 'news') {
    switch ($op) {
      case 'insert':
        foreach ($node->field_allowed_brands['und'] as $brand) {
          $data = array(
            'nid' => $node->nid,
            'type' => $node->type,
            'brand_id' => $brand['target_id'],
            'status' => 0
          );
          $query = db_insert('crealead_shared_content')->fields($data);
          watchdog('crealead_shared_content', 'Node ' . $node->nid . ' inserted.');
        }
        break;

      case 'update':
        // First of all, we must store brand_id and display status
        // for all brand the current article is shared with.
        $query = db_select('crealead_shared_content', 'csc');
        $query->fields('csc', array('nid','brand_id', 'status'));
        $query->condition('nid', $node->nid);
        $previously_registered_brands = $query->execute()->fetchAllKeyed(1,2);

        // Then, in table crealead_shared_content, we delete all records
        // related to the current article.
        $query = db_delete('crealead_shared_content')
          ->condition('nid', $node->nid);
        $query->execute();

        // Finally, we register allowed brands in crealead_shared_content.
        // If this brand previously existed, we save it with the previous status.
        foreach ($node->field_allowed_brands['und'] as $brand) {
          $status = isset($previously_registered_brands[$brand['target_id']]) ? $previously_registered_brands[$brand['target_id']] : '0';
          $data = array(
            'nid' => $node->nid,
            'type' => $node->type,
            'brand_id' => $brand['target_id'],
            'status' => $status
          );
          $query = db_insert('crealead_shared_content')->fields($data);
          $query->execute();
        }

        watchdog('crealead_shared_content', 'Node ' . $node->nid . ' updated.');

        // And we send an alert message to each of the previously allowed brands.
        $article_data = array();
        $article_data['nid'] = $node->nid;
        $article_wrapper = entity_metadata_wrapper('node', $node);
        $article_data['title'] = $article_wrapper->title->value();
        $article_data['author'] = $article_wrapper->author->name->value();
        $article_data['related_brand'] = $article_wrapper->field_article_related_brands[0]->title->value();

        $brand_data = array();
        foreach (array_keys($previously_registered_brands) as $brand_id) {
          $wrapper = entity_metadata_wrapper('node', $brand_id);
          $brand_data['name'] = $wrapper->title->value();
          $brand_data['owner_mail'] = $wrapper->author->mail->value();

          crealead_articles_send_update_email($article_data, $brand_data);
        }
        break;

      case 'delete':
        $query = db_delete('crealead_shared_content')
          ->condition('nid', $node->nid);
        $query->execute();
        watchdog('crealead_shared_content', 'Node ' . $node->nid . ' deleted.');
    }
  }
}

function crealead_articles_send_update_email($article_data, $brand_data) {
  // Email message building
  $to = $brand_data['owner_mail'];
  $from = "Crealead <contact@crealead.com>";
  $host = $_SERVER['HTTP_HOST'];

  $mail_subject = '[Crealead] Modification d\'un article partagé avec vous';
  $mail_body =
    '<div id="crealead-email-body">' .
    '<br/>' .
    '<p>Bonjour,</p>'.

    '<p>L\'article <b>' . $article_data['title'] . '</b> publié par ' . $article_data['author'] . ' dans la marque <i>' . $article_data['related_brand'] .
    '</i> et partagé avec votre marque <marque> vient d\'être modifié.<br>' .
    'Pour voir ces modifications, rendez-vous sur la <a href="http://' . $host . '/node/' . $article_data['nid'] . '">page de cet article</a> et cliquez sur l\'onglet Révisions puis sur Comparer.</p>' .

    '</div>';

  $footer_image_fullpath = drupal_get_path('module','kcore') . '/images/bandeau-crealead.jpg';

  $mail_body .=
    '<br/><br/>' .
    '<p class="crealead-email-footer">' .
    '<img src="' . $footer_image_fullpath . '">' .
    '</p>';

  $params = array('subject' => $mail_subject, 'body' => $mail_body);

  if (drupal_mail('crealead_articles', 'article_update_mail', $to, language_default(), $params, $from)) {
    $message = "Warning email for node modification (nid={$article_data['nid']}) sent to {$brand_data['owner_mail']}";
  }
  else {
    $message = "Article update email sending failed.";
  }

  watchdog('crealead_articles', $message);
}


/**
 * Implements hook_mail().
 */
function crealead_articles_mail($key, &$message, $params) {
  switch ($key) {
    case 'article_update_mail':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}
