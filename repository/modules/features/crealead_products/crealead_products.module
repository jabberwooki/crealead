<?php
/**
 * @file
 * Code for the Produits feature.
 */

include_once 'crealead_products.features.inc';

function crealead_products_form_product_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','crealead_products') . '/js/crealead_products.js');
  global $user;
  $current_user_roles = $user->roles;
  $crealead_products_allowed_roles = array('administrateur','webmaster','rÃ©fÃ©rent');
  $current_user_allowed_roles = array_intersect($crealead_products_allowed_roles, $current_user_roles);

  // Related brands list handling ----------------------------------------------
  // The product create/edit form always contains a user id.
  // If product is being created, user id is the current user id.
  // If product is being modified, user id is the product author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $product_brands = $query->execute()->fetchAllKeyed(2, 2);

  $brand_options = $form['field_product_related_brands']['und']['#options'];
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $product_brands)) {
      unset($brand_options[$key]);
    }
  }

  $form['field_product_related_brands']['und']['#options'] = $brand_options;

    // Then, if product is being modified and current user is not news author,
    // we must display a disabled brand list, unless current used is allowed to.
    /*if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
      $form['field_product_related_brands']['#disabled'] = TRUE;
    }*/
    // End of Related brands list handling ---------------------------------------

    // If product is being created from a brand page,
    // we must catch the brand nid from url
    // and check the corresponding brand in field_related_brands field.
    if (!isset($form['nid']['#value']) && NULL != arg(3)) {
      $form['field_product_related_brands']['und']['#default_value'] = arg(3);
    }
    // End of Related brands list handling ---------------------------------------
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_products_views_pre_render(&$view) {
  if ($view->name == 'products' && $view->current_display == 'entity_view_1') {
    // Link 'Ajouter un produit' must be added to block only for coes attached to the current brand.
    if (isset($view->current_entity)) {
      $current_brand = $view->current_entity;
    }
    else {
      $current_brand = node_load(arg(1));
    }
    $wrapper = entity_metadata_wrapper('node', $current_brand);
    $brand_coes = $wrapper->field_brand_coes->value();
    global $user;
    foreach ($brand_coes as $brand_coe) {
      if (!empty($brand_coe->field_brand_coe) && $user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter un produit',
          '/node/add/product/' . $current_brand->nid,
          array('query' => array('destination' => current_path() . '#bootstrap-fieldgroup-nav-item--solutions'))
        );
        break;
      }
    }
    /*


    global $user;
    foreach ($brand_coes as $brand_coe) {
      if ($user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter un produit',
          '/node/add/produit/' . $current_brand->nid,
          array('query' => array('destination' => current_path()))
        );
        break;
      }
    }*/

  }
}

