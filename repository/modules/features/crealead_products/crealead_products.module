<?php
/**
 * @file
 * Code for the Produits feature.
 */

include_once 'crealead_products.features.inc';

define('INTRO_CAR_LIMIT', 350);

function crealead_products_form_product_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','crealead_products') . '/js/crealead_products.js');
  global $user;
  $current_user_roles = $user->roles;
  $crealead_products_allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($crealead_products_allowed_roles, $current_user_roles);

  // Related brands list handling ----------------------------------------------
  // The product create/edit form always contains a user id.
  // If product is being created, user id is the current user id.
  // If product is being modified, user id is the product author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $product_brands = $query->execute()->fetchAllKeyed(2, 2);

  $brand_options = $form['field_product_related_brands']['und']['#options'];
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $product_brands)) {
      unset($brand_options[$key]);
    }
  }

  $form['field_product_related_brands']['und']['#options'] = $brand_options;

    // Then, if product is being modified and current user is not news author,
    // we must display a disabled brand list, unless current used is allowed to.
    /*if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
      $form['field_product_related_brands']['#disabled'] = TRUE;
    }*/
    // End of Related brands list handling ---------------------------------------

    // If product is being created from a brand page,
    // we must catch the brand nid from url
    // and check the corresponding brand in field_related_brands field.
    if (!isset($form['nid']['#value']) && NULL != arg(3)) {
      $form['field_product_related_brands']['und']['#default_value'] = arg(3);
    }
    // End of Related brands list handling ---------------------------------------

  // We must display only sector brands the parent brand(s) of the current product is (are) related to.
  // First, we get the parent brands.
  $parent_brands = crealead_products_get_parent_brands($form['nid']['#value']);

  // If any parent brands exist, we get the sector brands of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = crealead_brands_get_parent_sector_brands($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        crealead_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands field from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
  }

  // Handling of field_is_structure display
  $allowed_roles = array('administrateur','webmaster','assistant','direction','entrepreneur prestataire','pôle gestion','référent');
  if (empty(array_intersect($allowed_roles, $current_user_roles))) {
    $form['field_is_structure']['#access'] = FALSE;
  }

  // Gestion du champ Introduction
  // Insertion du contrôle de saisie du nombre de caractères.
  $form['field_introduction']['und'][0]['#attributes']['maxlength'] = INTRO_CAR_LIMIT;
  drupal_add_css(drupal_get_path('module','crealead_products') . '/css/crealead_products.css');


    // GESTION DU CHAMP TECHNIQUE DE RECHERCHE
    // 1 - Déplacement de l'onglet vertical "Champs Crealed" vers la dernière position.
    $form['#groups']['group_crealead_fields']->weight = 200;
    // 2 - Champ en lecture seule
    $form['field_product_search']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
}

function crealead_products_ckeditor_plugin() {
  return array(
    'maxlength' => array(
      // Name of the plugin used to write it.
      'name' => 'maxlength',
      // Description of the plugin - it would be displayed in the plugins management section of profile settings.
      'desc' => t('Maxlength - Plugin for characters number limitation'),
      // The full URL to the CKEditor plugins directory, with the trailing slash.
      'path' => base_path() . drupal_get_path('module', 'crealead_products') . '/ckeditor_plugins/maxlength/',
//      'buttons' => array(
//        'button_name' => array(
//          // Path to the button icon. Relative to the plugin directory 'path' unless 'icon_path' is specified.
//          'icon' => 'icon/plugin_name.png',
//          // Optional full path to the directory the icon is located in.
//          'icon_path' => base_path() . drupal_get_path('theme', 'my_theme') . '/icon_dir/',
//          'label' => 'Button Label',
//        )
//      )
    ),
  );
}

function crealead_products_get_parent_brands($product_id) {
  if (!isset($product_id)) return array();

  $query = db_select('field_data_field_product_related_brands', 'fprb');
  $query->fields('fprb', array('field_product_related_brands_target_id'));
  $query->condition('entity_id', $product_id);

  return $query->execute()->fetchAllKeyed(0,0);
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_products_views_pre_render(&$view) {
  if ($view->name == 'products' && $view->current_display == 'entity_view_1') {
    // Link 'Ajouter un produit' must be added to block only for coes attached to the current brand.
    if (isset($view->current_entity)) {
      $current_brand = $view->current_entity;
    }
    else {
      $current_brand = node_load(arg(1));
    }
    $wrapper = entity_metadata_wrapper('node', $current_brand);
    $brand_coes = $wrapper->field_brand_coes->value();
    global $user;
    foreach ($brand_coes as $brand_coe) {
      if (!empty($brand_coe->field_brand_coe) && $user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter un produit',
          '/node/add/product/' . $current_brand->nid,
          array('query' => array('destination' => current_path() . '#bootstrap-fieldgroup-nav-item--solutions'))
        );
        break;
      }
    }
    /*


    global $user;
    foreach ($brand_coes as $brand_coe) {
      if ($user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter un produit',
          '/node/add/produit/' . $current_brand->nid,
          array('query' => array('destination' => current_path()))
        );
        break;
      }
    }*/

  }
  elseif ($view->name == 'products' && $view->current_display == 'allowed_products') {
    // If referer is the ajax call, brand_nid can be found as argument 4, otherwise
    if(arg(4)) {
      $query = db_select('node', 'n')->fields('n', array('title'));
      $query->condition('n.nid', arg(4));
      $brand_name = $query->execute()->fetchField();
    }
    else {
      $brand_name = $view->current_entity->title;
    }

    $view->build_info['title'] = str_replace('brand_name', $brand_name, $view->build_info['title']);
  }
}

function crealead_products_node_view($node, $view_mode, $langcode) {

  if ($node->type == 'product') {
    if ($view_mode == 'sector_brand_block' || $view_mode == 'teaser') {

      $node->content['field_introduction'][0]['#markup'] =
        crealead_products_truncate($node->content['field_introduction'][0]['#markup'], INTRO_CAR_LIMIT, $ending = '...',  $exact=true, $considerHTML=true);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function crealead_products_node_presave($node) {
  if ($node->type == 'product') {
    $product_name = $node->title . ' ';
    $product_intro = $product_earnings = $product_description = $product_who = $product_brands = '';

    if (isset($node->field_introduction['und'][0]['value'])) {
        $product_intro = strip_tags($node->field_introduction['und'][0]['value']) . ' ';
    }
    if (isset($node->field_product_earnings['und'][0]['value'])) {
        $product_earnings = strip_tags($node->field_product_earnings['und'][0]['value']) . ' ';
    }
    if (isset($node->body['und'][0]['value'])) {
        $product_description = strip_tags($node->body['und'][0]['value']) . ' ';
    }
    if (isset($node->field_product_to_whom['und'][0]['value'])) {
        $product_who = strip_tags($node->field_product_to_whom['und'][0]['value']) . ' ';
    }

    if (!empty($node->field_product_related_brands['und'])) {
        foreach ($node->field_product_related_brands['und'] as $brand) {
            $query = db_select('node', 'n');
            $query->fields('n', array('title'))
                ->condition('n.nid', $brand['target_id']);
            $result = $query->execute()->fetchField();
            $product_brands .= $result;
        }
    }

    $search_data = $product_name
        . $product_intro
        . $product_earnings
        . $product_description
        . $product_brands;
    $search_array = array('value' => $search_data, 'format' => 'plain_text');

    if (!isset($node->field_product_search['und'][0])) {
        $node->field_product_search['und'][] = $search_array;
    }
    else {
        $node->field_product_search['und'][0] = $search_array;
    }
  }
}

function crealead_products_fill_search_field() {
    $query = new EntityFieldQueryExtraFields();
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'product')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->addExtraField('', 'title', 'title', 'node');
    $result = $query->execute();

    $count = 0;
    if (isset($result['node'])) {
        $products = node_load_multiple(array_keys($result['node']));
        foreach ($products as $product) {
            node_save($product);
            $count++;
        }
    }
    dpm($count . ' nodes de type product enregistrés');
}

/**
 * Truncates text.
 *
 * Cuts a string to the length of $length and replaces the last characters
 * with the ending if the text is longer than length.
 *
 * Thanks to esedic : https://snippets.cacher.io/snippet/8411068832478f4e8bcb
 *
 * @param string $text String to truncate.
 * @param integer $length Length of returned string, including ellipsis.
 * @param string $ending Ending to be appended to the trimmed string.
 * @param boolean $exact If false, $text will not be cut mid-word
 * @param boolean $considerHtml If true, HTML tags would be handled correctly
 * @return string Trimmed string.
 */
function crealead_products_truncate($text, $length = 100, $ending = '...', $exact = true, $considerHtml = false) {
  if ($considerHtml) {
    // if the plain text is shorter than the maximum length, return the whole text
    if (strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {
      return $text;
    }

    // splits all html-tags to scanable lines
    preg_match_all('/(<.+?>)?([^<>]*)/s', $text, $lines, PREG_SET_ORDER);

    $total_length = strlen($ending);
    $open_tags = array();
    $truncate = '';

    foreach ($lines as $line_matchings) {
      // if there is any html-tag in this line, handle it and add it (uncounted) to the output
      if (!empty($line_matchings[1])) {
        // if it’s an “empty element” with or without xhtml-conform closing slash (f.e.)
        if (preg_match('/^<(\s*.+?\/\s*|\s*(img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param)(\s.+?)?)>$/is', $line_matchings[1])) {
          // do nothing
          // if tag is a closing tag (f.e.)
        } else if (preg_match('/^<\s*\/([^\s]+?)\s*>$/s', $line_matchings[1], $tag_matchings)) {
          // delete tag from $open_tags list
          $pos = array_search($tag_matchings[1], $open_tags);
          if ($pos !== false) {
            unset($open_tags[$pos]);
          }
          // if tag is an opening tag (f.e. )
        } else if (preg_match('/^<\s*([^\s>!]+).*?>$/s', $line_matchings[1], $tag_matchings)) {
          // add tag to the beginning of $open_tags list
          array_unshift($open_tags, strtolower($tag_matchings[1]));
        }
        // add html-tag to $truncate’d text
        $truncate .= $line_matchings[1];
      }

      // calculate the length of the plain text part of the line; handle entities as one character
      $content_length = strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', ' ', $line_matchings[2]));
      if ($total_length+$content_length > $length) {
        // the number of characters which are left
        $left = $length - $total_length;
        $entities_length = 0;
        // search for html entities
        if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', $line_matchings[2], $entities, PREG_OFFSET_CAPTURE)) {
          // calculate the real length of all entities in the legal range
          foreach ($entities[0] as $entity) {
            if ($entity[1]+1-$entities_length <= $left) {
              $left--;
              $entities_length += strlen($entity[0]);
            } else {
              // no more characters left
              break;
            }
          }
        }
        $truncate .= substr($line_matchings[2], 0, $left+$entities_length);
        // maximum lenght is reached, so get off the loop
        break;
      } else {
        $truncate .= $line_matchings[2];
        $total_length += $content_length;
      }

      // if the maximum length is reached, get off the loop
      if($total_length >= $length) {
        break;
      }
    }
  } else {
    if (strlen($text) <= $length) {
      return $text;
    } else {
      $truncate = substr($text, 0, $length - strlen($ending));
    }
  }

  // if the words shouldn't be cut in the middle...
  if (!$exact) {
    // ...search the last occurance of a space...
    $spacepos = strrpos($truncate, ' ');
    if (isset($spacepos)) {
      // ...and cut the text in this position
      $truncate = substr($truncate, 0, $spacepos);
    }
  }

  // add the defined ending to the text
  $truncate .= $ending;

  if($considerHtml) {
    // close all unclosed html-tags
    foreach ($open_tags as $tag) {
      $truncate .= '';
    }
  }

  return $truncate;

}