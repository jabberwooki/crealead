<?php
/**
 * @file
 * Code for the Produits feature.
 */

include_once 'crealead_products.features.inc';

define('INTRO_CAR_LIMIT', 350);

function crealead_products_form_product_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','crealead_products') . '/js/crealead_products.js');
  global $user;
  $current_user_roles = $user->roles;
  $crealead_products_allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($crealead_products_allowed_roles, $current_user_roles);

  // Related brands list handling ----------------------------------------------
  // The product create/edit form always contains a user id.
  // If product is being created, user id is the current user id.
  // If product is being modified, user id is the product author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $product_brands = $query->execute()->fetchAllKeyed(2, 2);

  $brand_options = $form['field_product_related_brands']['und']['#options'];
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $product_brands)) {
      unset($brand_options[$key]);
    }
  }

  $form['field_product_related_brands']['und']['#options'] = $brand_options;

    // Then, if product is being modified and current user is not news author,
    // we must display a disabled brand list, unless current used is allowed to.
    /*if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
      $form['field_product_related_brands']['#disabled'] = TRUE;
    }*/
    // End of Related brands list handling ---------------------------------------

    // If product is being created from a brand page,
    // we must catch the brand nid from url
    // and check the corresponding brand in field_related_brands field.
    if (!isset($form['nid']['#value']) && NULL != arg(3)) {
      $form['field_product_related_brands']['und']['#default_value'] = arg(3);
    }
    // End of Related brands list handling ---------------------------------------

  // We must display only sector brands the parent brand(s) of the current product is (are) related to.
  // First, we get the parent brands.
  $parent_brands = crealead_products_get_parent_brands($form['nid']['#value']);

  // If any parent brands exist, we get the sector brands of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = crealead_brands_get_parent_sector_brands($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        crealead_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands field from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
  }

  // Handling of field_is_structure display
  $allowed_roles = array('administrateur','webmaster','assistant','direction','entrepreneur prestataire','pôle gestion','référent');
  if (empty(array_intersect($allowed_roles, $current_user_roles))) {
    $form['field_is_structure']['#access'] = FALSE;
  }

  // Gestion du champ Introduction
  // Insertion du contrôle de saisie du nombre de caractères.
  $form['field_introduction']['und'][0]['#attributes']['maxlength'] = INTRO_CAR_LIMIT;
  drupal_add_css(drupal_get_path('module','crealead_products') . '/css/crealead_products.css');


    // GESTION DU CHAMP TECHNIQUE DE RECHERCHE
    // 1 - Déplacement de l'onglet vertical "Champs Crealed" vers la dernière position.
    $form['#groups']['group_crealead_fields']->weight = 200;
    // 2 - Champ en lecture seule
    $form['field_product_search']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
}

function crealead_products_ckeditor_plugin() {
  return array(
    'maxlength' => array(
      // Name of the plugin used to write it.
      'name' => 'maxlength',
      // Description of the plugin - it would be displayed in the plugins management section of profile settings.
      'desc' => t('Maxlength - Plugin for characters number limitation'),
      // The full URL to the CKEditor plugins directory, with the trailing slash.
      'path' => base_path() . drupal_get_path('module', 'crealead_products') . '/ckeditor_plugins/maxlength/',
//      'buttons' => array(
//        'button_name' => array(
//          // Path to the button icon. Relative to the plugin directory 'path' unless 'icon_path' is specified.
//          'icon' => 'icon/plugin_name.png',
//          // Optional full path to the directory the icon is located in.
//          'icon_path' => base_path() . drupal_get_path('theme', 'my_theme') . '/icon_dir/',
//          'label' => 'Button Label',
//        )
//      )
    ),
  );
}

function crealead_products_get_parent_brands($product_id) {
  if (!isset($product_id)) return array();

  $query = db_select('field_data_field_product_related_brands', 'fprb');
  $query->fields('fprb', array('field_product_related_brands_target_id'));
  $query->condition('entity_id', $product_id);

  return $query->execute()->fetchAllKeyed(0,0);
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_products_views_pre_render(&$view) {
  if ($view->name == 'products' && $view->current_display == 'entity_view_1') {
    // Link 'Ajouter un produit' must be added to block only for coes attached to the current brand.
    if (isset($view->current_entity)) {
      $current_brand = $view->current_entity;
    }
    else {
      $current_brand = node_load(arg(1));
    }
    $wrapper = entity_metadata_wrapper('node', $current_brand);
    $brand_coes = $wrapper->field_brand_coes->value();
    global $user;
    foreach ($brand_coes as $brand_coe) {
      if (!empty($brand_coe->field_brand_coe) && $user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter une prestation',
          '/node/add/product/' . $current_brand->nid,
          array('query' => array('destination' => current_path() . '#bootstrap-fieldgroup-nav-item--solutions'))
        );
        break;
      }
    }
    /*


    global $user;
    foreach ($brand_coes as $brand_coe) {
      if ($user->uid != $brand_coe->field_brand_coe['und'][0]['target_id']) {
        continue;
      }
      else {
        $view->header['area']->options['content'] = l(
          'Ajouter un produit',
          '/node/add/produit/' . $current_brand->nid,
          array('query' => array('destination' => current_path()))
        );
        break;
      }
    }*/

  }
  elseif ($view->name == 'products' && $view->current_display == 'allowed_products') {
    // If referer is the ajax call, brand_nid can be found as argument 4, otherwise
    if(arg(4)) {
      $query = db_select('node', 'n')->fields('n', array('title'));
      $query->condition('n.nid', arg(4));
      $brand_name = $query->execute()->fetchField();
    }
    else {
      $brand_name = $view->current_entity->title;
    }

    $view->build_info['title'] = str_replace('brand_name', $brand_name, $view->build_info['title']);
  }
  elseif ($view->name == 'products' && $view->current_display == 'sector_brands_products') {
    drupal_add_js(drupal_get_path('theme','crealead') . '/js/match-product-height.js');
  }
}

function crealead_products_node_view($node, $view_mode, $langcode) {
//  dpm($node->type . ' --- ' . $view_mode . ' --- ' . $node->title);

  if ($node->type == 'product') {
    if ($view_mode == 'sector_brand_block' || $view_mode == 'teaser') {
      if(!empty($node->content['field_introduction'])) {
        $node->content['field_introduction'][0]['#markup'] =
          truncate_html($node->content['field_introduction'][0]['#markup'], INTRO_CAR_LIMIT, $ending = '');
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function crealead_products_node_presave($node) {
  if ($node->type == 'product') {
    $product_name = $node->title . ' ';
    $product_intro = $product_earnings = $product_description = $product_who = $product_brands = '';

    if (isset($node->field_introduction['und'][0]['value'])) {
        $product_intro = strip_tags($node->field_introduction['und'][0]['value']) . ' ';
    }
    if (isset($node->field_product_earnings['und'][0]['value'])) {
        $product_earnings = strip_tags($node->field_product_earnings['und'][0]['value']) . ' ';
    }
    if (isset($node->body['und'][0]['value'])) {
        $product_description = strip_tags($node->body['und'][0]['value']) . ' ';
    }
    if (isset($node->field_product_to_whom['und'][0]['value'])) {
        $product_who = strip_tags($node->field_product_to_whom['und'][0]['value']) . ' ';
    }

    if (!empty($node->field_product_related_brands['und'])) {
        foreach ($node->field_product_related_brands['und'] as $brand) {
            $query = db_select('node', 'n');
            $query->fields('n', array('title'))
                ->condition('n.nid', $brand['target_id']);
            $result = $query->execute()->fetchField();
            $product_brands .= $result;
        }
    }

    $search_data = $product_name
        . $product_intro
        . $product_earnings
        . $product_description
        . $product_brands;
    $search_array = array('value' => $search_data, 'format' => 'plain_text');

    if (!isset($node->field_product_search['und'][0])) {
        $node->field_product_search['und'][] = $search_array;
    }
    else {
        $node->field_product_search['und'][0] = $search_array;
    }
  }
}

function crealead_products_fill_search_field() {
    $query = new EntityFieldQueryExtraFields();
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'product')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->addExtraField('', 'title', 'title', 'node');
    $result = $query->execute();

    $count = 0;
    if (isset($result['node'])) {
        $products = node_load_multiple(array_keys($result['node']));
        foreach ($products as $product) {
            node_save($product);
            $count++;
        }
    }
    dpm($count . ' nodes de type product enregistrés');
}

/**
 * truncate_html()
 *
 * THANKS TO andykirk (https://gist.github.com/andykirk/b304a3c84594515677e6).
 *
 * Truncates a HTML string to a given length of _visisble_ (content) characters.
 * E.g.
 * "This is some <b>bold</b> text" has a visible/content length of 22 characters,
 * though the total string length is 29 characters.
 * This function allows you to limit the visible/content length whilst preserving any HTML formatting.
 *
 * @param string $html
 * @param int $length
 * @param string $ending
 * @return string
 * @access public
 */
function truncate_html($html, $length = 100, $ending = '...')
{
  if (!is_string($html)) {
    trigger_error('Function \'truncate_html\' expects argument 1 to be an string', E_USER_ERROR);
    return false;
  }

  if (mb_strlen(strip_tags($html)) <= $length) {
    return $html;
  }
  $total = mb_strlen($ending);
  $open_tags = array();
  $return = '';
  $finished = false;
  $final_segment = '';
  $self_closing_elements = array(
    'area',
    'base',
    'br',
    'col',
    'frame',
    'hr',
    'img',
    'input',
    'link',
    'meta',
    'param'
  );
  $inline_containers = array(
    'a',
    'b',
    'abbr',
    'cite',
    'em',
    'i',
    'kbd',
    'span',
    'strong',
    'sub',
    'sup'
  );
  while (!$finished) {
    if (preg_match('/^<(\w+)[^>]*>/', $html, $matches)) { // Does the remaining string start in an opening tag?
      // If not self-closing, place tag in $open_tags array:
      if (!in_array($matches[1], $self_closing_elements)) {
        $open_tags[] = $matches[1];
      }
      // Remove tag from $html:
      $html = substr_replace($html, '', 0, strlen($matches[0]));
      // Add tag to $return:
      $return .= $matches[0];
    } elseif (preg_match('/^<\/(\w+)>/', $html, $matches)) { // Does the remaining string start in an end tag?
      // Remove matching opening tag from $open_tags array:
      $key = array_search($matches[1], $open_tags);
      if ($key !== false) {
        unset($open_tags[$key]);
      }
      // Remove tag from $html:
      $html = substr_replace($html, '', 0, strlen($matches[0]));
      // Add tag to $return:
      $return .= $matches[0];
    } else {
      // Extract text up to next tag as $segment:
      if (preg_match('/^([^<]+)(<\/?(\w+)[^>]*>)?/', $html, $matches)) {
        $segment = $matches[1];
        // Following code taken from https://trac.cakephp.org/browser/tags/1.2.1.8004/cake/libs/view/helpers/text.php?rev=8005.
        // Not 100% sure about it, but assume it deals with utf and html entities/multi-byte characters to get accureate string length.
        $segment_length = mb_strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', ' ', $segment));
        // Compare $segment_length + $total to $length:
        if ($segment_length + $total > $length) { // Truncate $segment and set as $final_segment:
          $remainder = $length - $total;
          $entities_length = 0;
          if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', $segment, $entities, PREG_OFFSET_CAPTURE)) {
            foreach($entities[0] as $entity) {
              if ($entity[1] + 1 - $entities_length <= $remainder) {
                $remainder--;
                $entities_length += mb_strlen($entity[0]);
              } else {
                break;
              }
            }
          }
          // Otherwise truncate $segment and set as $final_segment:
          $finished = true;
          $final_segment = mb_substr($segment, 0, $remainder + $entities_length);
        } else {
          // Add $segment to $return and increase $total:
          $return .= $segment;
          $total += $segment_length;
          // Remove $segment from $html:
          $html = substr_replace($html, '', 0, strlen($segment));
        }
      } else {
        $finshed = true;
      }
    }
  }
  // Check for spaces in $final_segment:
  if (strpos($final_segment, ' ') === false && preg_match('/<(\w+)[^>]*>$/', $return)) { // If none and $return ends in an opening tag: (we ignore $final_segment)
    // Remove opening tag from end of $return:
    $return = preg_replace('/<(\w+)[^>]*>$/', '', $return);
    // Remove opening tag from $open_tags:
    $key = array_search($matches[3], $open_tags);
    if ($key !== false) {
      unset($open_tags[$key]);
    }
  } else { // Otherwise, truncate $final_segment to last space and add to $return:
    // $spacepos = strrpos($final_segment, ' ');
    $return .= mb_substr($final_segment, 0, mb_strrpos($final_segment, ' '));
  }
  $return = trim($return);
  $len = strlen($return);
  $last_char = substr($return, $len - 1, 1);
  if (!preg_match('/[a-zA-Z0-9]/', $last_char)) {
    $return = substr_replace($return, '', $len - 1, 1);
  }
  // Add closing tags:
  $closing_tags = array_reverse($open_tags);
  $ending_added = false;
  foreach($closing_tags as $tag) {
    if (!in_array($tag, $inline_containers) && !$ending_added) {
      $return .= $ending;
      $ending_added = true;
    }
    $return .= '</' . $tag . '>';
  }
  return $return;
}
