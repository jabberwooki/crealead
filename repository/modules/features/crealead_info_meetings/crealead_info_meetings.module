<?php
/**
 * @file
 * Code for the Réunions d'infos feature.
 */

include_once 'crealead_info_meetings.features.inc';

/**
 * Implements hook_init().
 */
function crealead_info_meetings_init() {
  $node = menu_get_object();
  if ((isset($node) && $node->type == "info_meeting") || (arg(0) == 'registration' && ((NULL !== arg(1) && is_int((int) arg(1)) && arg(1) != 0) || (NULL !== arg(2) && arg(2) == 'edit')))) {
    // We catch the first 3 letters of each term from registrant_statuses vocabulary,
    // to be used in the STATUT checkboxes jquery reorganisation.
    // (see repository/modules/features/crealead_info_meetings/js/crealead_info_meetings.js)
    $display = 'create-form'; // case 1: we are in the info meeting full view mode which displays the registration creation form
    if (arg(0) == 'registration' && NULL !== arg(1) && is_int((int) arg(1)) && arg(1) != 0) {
      $display = 'full-mode'; // case 2: we are in the registration full view mode
    }
    if (arg(0) == 'registration' && NULL !== arg(2) && arg(2) == 'edit') {
      $display = 'edit-form'; // case 3: we are in the registration edit form
    }
    drupal_add_js(array('crealead_registration_display' => $display), 'setting');

    $params = array();
    $voc = taxonomy_vocabulary_machine_name_load('registrant_statuses');
    $tree = taxonomy_get_tree($voc->vid);
    foreach ($tree as $term) {
      $params[$term->tid] = substr(strtolower(transliteration_get($term->name)), 0, 3);
    }
    drupal_add_js(array('crealead_registrant_statuses' => $params), 'setting');
    drupal_add_js(drupal_get_path('module', 'crealead_info_meetings') . '/js/crealead_info_meetings.js');
  }
  elseif ('reunions-information' == current_path()) {
    drupal_page_is_cacheable(FALSE);
    drupal_add_js(drupal_get_path('module', 'crealead_info_meetings') . '/js/crealead_info_meetings.js');
  }
}

/**
 * Implements hook_permission().
 */
function crealead_info_meetings_permission() {
  return array(
    'administer info meetings' => array(
      'title' => t('Administer information meetings'),
      'description' => t('See list of information meetings and perform administration tasks.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function crealead_info_meetings_menu() {
  $items['admin/config/crealead/info-meetings'] = array(
    'title' => 'Réunion d\'information',
    'description' => 'Paramétrage des réunions d\'information.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crealead_info_meetings_settings_form'),
    'access arguments' => array('administer crealead settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'crealead_info_meetings.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_info_meetings_form_registration_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'crealead_info_meetings') . '/css/crealead_info_meetings.css');
  // Form fields re-ordering
//  $form['who_is_registering']['#weight'] = -10;
//  $form['user']['#weight'] = -9;
//  $form['count']['#weight'] = -8;

//  $form['field_registrant_title']['#weight'] = 0;
//  $form['field_registrant_firstname']['#weight'] = 1;
//  $form['field_registrant_lastname']['#weight'] = 1;
//  $form['anon_mail']['#weight'] = 0;
//  $form['field_registrant_phone']['#weight'] = 4;
//  $form['field_registrant_project_domain']['#weight'] = 5;
//  $form['field_registrant_status']['#weight'] = 6;
//  $form['field_beneficiary_number']['#weight'] = 10;
//  $form['field_unemployment_date']['#weight'] = 11;
//  $form['field_other_specify']['#weight'] = 12;

  $form['state']['#weight'] = 100;

  // Field STATUT description not displayed by Drupal (why ?), so here is a trick.
  $form['field_registrant_status']['#suffix'] =
    '<div class="description">' . $form['field_registrant_status']['und']['#description'] . '</div>';

  // If anonymous user
  if (!user_is_logged_in()) {
    // field attendee is hidden
    unset($form['field_attendee']);
    // field email is made required visually (char *  close to label).
    $form['anon_mail']['#required'] = 1;

    $form['anon_mail']['#weight'] = 20;
    $form['field_registrant_lastname']['#weight'] = 25;
    $form['field_registrant_firstname']['#weight'] = 30;
    $form['field_registrant_phone']['#weight'] = 35;
//    unset($form['field_registrant_phone']);
  }
}

function crealead_info_meetings_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Current node being shown, if any.
  $node = menu_get_object();

  if ($node && $node->type == 'info_meeting') {

    $tabs =& $data['tabs'][0]['output'];

    // If the formatter 'registration form' has been chosen for the event's
    // 'full content' view mode, then no need to show the 'register' tab
    // since the registration form is already showing on the 'view' tab.
    $field_info = field_info_instance('node', 'field_info_meeting_registration', 'info_meeting');
    if ($field_info['display']['full']['type'] == 'registration_form') {
      foreach ($tabs as $tab_index => &$tab) {
        if ($tab['#link']['path'] == 'node/%/register') {

          unset($tabs[$tab_index]);

          // Since we're unsetting one tab, update the count so if there's
          // only one tab, the tab bar won't show.
          $data['tabs'][0]['count']--;

          break;
        }
      }
    }
  }
  elseif (!user_is_logged_in() && $root_path == 'registration/%') {
    unset($data['tabs']);
  }
}

/**
 * Implements hook_menu_alter().
 */
function crealead_info_meetings_menu_alter(&$items) {
  $items['node/%entity_object/registrations']['page callback'] = 'crealead_registration_list';
  //$items['node/%entity_object/registrations/list']['page callback'] = 'crealead_registration_list';
}

/**
 * Callback fucntion for above hoo_menu_alter().
 *
 * @return bool|void
 */
function crealead_registration_list() {
  return views_embed_view('crealead_registrations', 'registrations_list');
}

/**
 * Implements hook_entity_view_alter().
 */
function crealead_info_meetings_entity_view_alter(&$build, $type) {
  if ($type == 'registration' && $build['#view_mode'] != 'full') {
    $build['field_attendee'][0]['#markup'] = ($build['field_attendee']['#items'][0]['value'] == 1) ? 'oui' : 'non';
  }
  if ($type == 'registration' && $build['#view_mode'] == 'full') {
    $meeting_id = $build['#entity']->entity_id;
    $info_meeting = entity_metadata_wrapper('node', $meeting_id);
    $date_timestamp = $info_meeting->field_info_meeting_date->value->value();
    $date = format_date($date_timestamp, 'long');
    $build['info_meeting_date'][0]['#markup'] = $date;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function crealead_info_meetings_views_pre_render(&$view) {
  if (($view->name == 'crealead_registrations' || $view->name == 'info_meetings')
    && (($view->current_display == 'registrations_list') || $view->current_display == 'registrations_stats'
      || $view->current_display == 'registration_export')
  ) {
    foreach ($view->result as $result) {
      drupal_add_css(drupal_get_path('module', 'crealead_info_meetings') . '/css/crealead_info_meetings.css');
      $result->field_field_attendee[0]['rendered']['#markup'] =
        ($result->field_field_attendee[0]['raw']['value'] == 1) ? '<span class="presence-yes">oui</span>' : '<span class="presence-no">non</span>';
    }
  }

}


function crealead_info_meetings_preprocess_views_view(&$vars) {
  if ($vars['view']->name == 'info_meetings') {
    $vars['header'] = '<div id="xls-button" style="background-color: #FF6600; padding: 10px 10px 5px 10px; display:table;">' . $vars['feed_icon'] . '</div>';
  }
}

/**
 * Implements hook_action_info().
 *
 * Declares additional VBO actions for registration entities.
 */
function crealead_info_meetings_action_info() {
  return array(
    'crealead_check_registrants_as_absent' => array(
      'type' => 'registration',
      'label' => 'Marquer comme absent',
      'configurable' => FALSE,
    ),
    'crealead_check_registrants_as_present' => array(
      'type' => 'registration',
      'label' => 'Marquer comme présent',
      'configurable' => FALSE,
    ),
  );
}

/**
 * Callback function for VBO action on registrations. Mark a registrant as present.
 *
 * @param $entity
 * @param $context
 */
function crealead_check_registrants_as_present(&$entity, $context) {
  crealead_field_attendee_value_alter($entity->registration_id, 1);
}

/**
 * Callback function for VBO action on registrations. Mark a registrant as absent.
 *
 * @param $entity
 * @param $context
 */
function crealead_check_registrants_as_absent(&$entity, $context) {
  crealead_field_attendee_value_alter($entity->registration_id, 0);
}

/**
 * Helper function for VBO callback actions.
 *
 * @param integer $entity_id ID of the entity to alter.
 * @param integer $value Value to be given to field_attendee (1 to mark as present, 0 to mark as absent).
 */
function crealead_field_attendee_value_alter($entity_id, $value) {
  $wrapper = entity_metadata_wrapper('registration', $entity_id);
  $wrapper->field_attendee = $value;
  $wrapper->save();
}

/**
 * Implements hook_registration_status_alter().
 */
function crealead_info_meetings_registration_status_alter(&$status, &$context) {
  if (user_is_logged_in()) {
    $status = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_info_meetings_form_registration_entity_settings_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'crealead_info_meetings') . '/css/crealead_info_meetings.css');
  // Prevent page freezing when trying to display all available token in the reminder settings form.
  if (isset($form['reminder']['reminder_settings']['token_tree'])) {
    unset($form['reminder']['reminder_settings']['token_tree']);
  }
  $form['reminder']['reminder_settings']['reminder_template']['#title'] = 'Message de rappel';

  $form['scheduling']['open']['#date_format'] = 'd/m/Y H:i O';
  $form['scheduling']['close']['#date_format'] = 'd/m/Y H:i O';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crealead_info_meetings_form_registration_registrations_broadcast_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['token_tree'])) {
    unset($form['token_tree']);
  }

  $default_message = variable_get('info_meeting_default_email_body', '');
  if ($default_message == '') {
    $admin_url = '/admin/config/crealead/info-meetings?destination=' . current_path();

    $form['subject']['#weight'] = -2;

    $help_text = '<div>'
      . 'Aucun message par défaut n\'a été paramétré. '
      . 'Vous pouvez le faire en allant dans '
      . '<a href="' . $admin_url . '">Configuration > Crealead > Réunions d\'information</a>.'
      . '</div>';

    $form['help_text'] = array(
      '#markup' => $help_text,
      '#weight' => -1,
    );


    $form['message']['#weight'] = 0;
  }
  $form['message']['#default_value'] = $default_message;
}
